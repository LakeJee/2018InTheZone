#pragma config(Motor,  port2,           Lift1,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           Lift2,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           Lift3,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           Lift4,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           Hanging1,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           Hanging2,      tmotorVex393_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/


void MoveLift(int power);
void MoveHanging(int power);

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.
	AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
	// User control code here, inside the loop

	while (true)
	{
		wait1Msec(10);

		// This is the main execution loop for the user control program.
		// Each time through the loop your program should update motor + servo
		// values based on feedback from the joysticks.

		// ........................................................................
		// Insert user code here. This is where you use the joystick values to
		// update your motors, etc.
		// ........................................................................

		// Remove this function call once you have "real" code.
		//UserControlCodePlaceholderForTesting();
		if (vexRT[Btn6U] == 1)
		{
			int powerLift = 100;
			MoveLift(powerLift);

		}
		if (vexRT[Btn6D] == 1)
		{
			int powerLift = -100;
			MoveLift(powerLift);
		}
		if (vexRT[Btn8U] == 1)
		{
			int powerLift = 100;
			MoveHanging(powerLift);

		}
		if (vexRT[Btn8D] == 1)
		{
			int powerHang = -100;
			MoveHanging(powerHang);
		}
		if (vexRT[Btn5D] == 1 || vexRT[Btn8R] == 1)
		{
			int power = 0;
			MoveLift(power);
			MoveHanging(power);
		}

	}
}

void MoveLift(int power)
{
			motor[Lift1] = power;
			motor[Lift2] = power;
			motor[Lift3] = power;
			motor[Lift4] = power;
}

void MoveHanging(int power)
{
			motor[Hanging1] = power;
			motor[Hanging2] = power;
}
