#pragma config(Motor,  port2,           wheelLeft,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           wheelRight,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           armLiftLeftT,  tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           armLiftLeftB,  tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           armLiftRightT, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           armLiftRightB, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          mobileLiftM,    tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"


task mobileLift();



// ---------------------------------------
// FUNCTIONS
// LIFT
void moveLift(int power);

// MOBILE LIFT
void stopMobileLift();
void moveMobileLift(int power);
void moveMobileLiftUp(int power);
void moveMobileLiftDown(int power);
//void moveMobileLiftUpAndStop();
//void moveMobileLiftDownAndStop();

// END FUNCTIONS

// HELPERS
void stopAll();

// END HELPERS

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.
	AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/


task mobileLift()
{

	while (true)
	{
		wait1Msec(50);

	 	if (vexRT[Btn7R] == 1){
			// moveMobileLiftDownToRelease(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
			// moveMobileLiftDownAndStop(750, 80);
			moveMobileLiftDown(127);
		}
		else if (vexRT[Btn7L] == 1){
			// moveMobileLiftUpToStack(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
			moveMobileLiftUp(127);
		}

	 	if (vexRT[Btn7L] == 0 && vexRT[Btn7R] == 0){
	 		stopMobileLift();
		}
	}
}

// -------------------------------------
// MOBILE LIFT
void stopMobileLift(){
	moveMobileLift(0);
}

void moveMobileLiftUp(int power){
	moveMobileLift(power);
}

void moveMobileLiftDown(int power){
	moveMobileLift(-power);
}

void moveMobileLift(int power){
	motor[mobileLiftM] = power;
}
// END MOBILE LIFT

task usercontrol()
{

	// User control code here, inside the loop

	startTask(mobileLift);

	while (true)
	{
		wait1Msec(50);

		int ch1 = vexRT[Ch1];
		int ch3 = vexRT[Ch3];

		motor[wheelLeft] = ch3 + ch1;
		motor[wheelRight] = -(ch3 - ch1);

		if (abs(motor[wheelRight]) < 17 || abs(motor[wheelLeft]) < 17)
		{
			motor[wheelLeft] = 0;
			motor[wheelRight] = 0;
		}
		while (vexRT[Btn7U] == 1) {
			moveLift(50);
			if (vexRT[Btn7U] == 0){
				moveLift(10);
				writeDebugStreamLine("Stay-Up");

			}
		}
		while (vexRT[Btn7D] == 1) {
			moveLift(-50);
			if (vexRT[Btn7D] == 0){
				moveLift(-10);
				writeDebugStreamLine("Stay-Down");
			}
		}
		if (vexRT[Btn8L] == 1 ){
			stopAll();
		}
	}
}

// -------------------------------------
// STOPS
void stopAll(){
	motor[armLiftLeftB] = 0;
	motor[armLiftLeftT] = 0;
	motor[armLiftRightB] = 0;
	motor[armLiftRightT] = 0;
	//motor[clawMotor] = 0;
	//motor[clawLiftL] = 0;
	//motor[clawLiftR] = 0;
	motor[mobileLift] = 0;
	motor[wheelLeft] = 0;
	motor[wheelRight] = 0;
}
// END STOPS


//FUNCTIONS
void moveLift(int power) {
	motor[armLiftLeftB] = power;
	motor[armLiftLeftT] = power;
	motor[armLiftRightB] = power;
	motor[armLiftRightT] = power;
}
