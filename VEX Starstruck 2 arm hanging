#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    GyroPosition,   sensorGyro)
#pragma config(Sensor, in3,    LiftPosition,           sensorPotentiometer)
#pragma config(Sensor, in8,    ExternalBatteryValue, sensorAnalog)
#pragma config(Sensor, I2C_1,  Wheel,          sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           ClawRight,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           LeftLift,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           RightLift,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           Hanging1,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           Hanging2,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           FrontLeft,     tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           FrontRight,    tmotorVex393TurboSpeed_MC29, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port8,           BackLeft,      tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           BackRight,     tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          ClawLeft,      tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

task Move();
task Lift();
task Hang();

// Autonomous
int autonomousMode = 1;
void DisplayAutonomousMode(int autonomousModeValue);
void displayBatteryLevelOnLCD(int autonomousModeValue);
void AutonomousSelector(int btnLCD);
void Autonomous1();
void ProgrammingSkill();
void ProgrammingSkill_Extended();
void ClearEncoder();
void MoveValue(int distance, int power);
void GoStraight(int power);


// User Controls
void MoveLift(int power);
void MoveHanging(int power);
void MoveClaw(int power);
void TurnValueGyro(int distance, int power);
void Turn(int power);
void Shift(int power);
void ShiftValue(int distance, int power);
void LockWheel();

float adjustValue(float value, float proportion);
int AdjustPowerUsingBatteryLevel(int originalPower);


void LiftUp(int distance, int power);
void LiftUpNoStop(int distance, int power);
void LiftDown(int distance, int power);


void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	long startTime = nPgmTime;


	if (autonomousMode == 1)
	{
		Autonomous1();
	}
	else if (autonomousMode == 2)
	{
		ProgrammingSkill();
	}
	else if (autonomousMode == 3)
	{
		ProgrammingSkill_Extended();
	}
	else
	{
		Autonomous1();
	}

	writeDebugStreamLine("autonomous) Time: %d", nPgmTime - startTime);
}


// .....................................................................................
// Autonomous 1: Knocks two stars on the left side of middle fence
// .....................................................................................

void Autonomous1()
{
	// StartAuto(); //Opens out claw


	//Auton
	int globalWaiter = 200;
	//LockWheel();
	wait1Msec(300);
	MoveClaw(120); // closes claw

	ShiftValue(155, -120); // shifts right
	wait1Msec(globalWaiter);

	MoveValue(120, 120); // moves forward to cube

	wait1Msec(1000); // waits until the claw pickes up the cube

	int powerLift = 40;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(95, 120); // moves forward to the center
	wait1Msec(globalWaiter);

	MoveClaw(10); // holds the claw

	int angle = 350;
	TurnValueGyro(angle, -80); // rotates to the wall
	wait1Msec(globalWaiter);

	MoveValue(110, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 105;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	// Done the first part

	powerLift = -20;
	LiftDown(1500, powerLift); // lift down

	powerLift = -15;
	MoveLift(powerLift); // holds down the lift slightly
	MoveClaw(0);

	MoveValue(265, 120); // moves forward to the stars
	wait1Msec(globalWaiter);

	MoveClaw(120); // closes claw
	wait1Msec(1200); // waits until the claw pickes up the stars

	powerLift = 50;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveClaw(20); // holds the claw

	MoveValue(280, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(0); // opens claw
}

void ProgrammingSkill(){
	int globalWaiter = 200;
	////lockWheel();
	//wait1Msec(300);
	MoveClaw(120); // closes claw

	MoveValue(120, -60); //move back a bit
	wait1Msec(500);
	MoveClaw(0); //stop closing
//	MoveValue(20, 40);//come back forward a little
	// for (int i = 0; i<4; i++){
	for (int i = 0; i<1; i++){
		wait1Msec(1200);
		MoveClaw(120); //start closing
		wait1Msec(1000);
		int powerLift = 30;
		MoveLift(powerLift); // lift up slightly
		wait1Msec(500);
		MoveClaw(20); // holds claw
		int goBack = 290;
		if (i==0){
				goBack = 320;
		}
		MoveValue(goBack, -60); //move back to fence
		powerLift = 105;
		LiftUpNoStop(2500, powerLift);
		MoveClaw(-120);
		if (i>1){
			wait1Msec(180 * ((i+1)/2));
		}
		else{
		wait1Msec(200);
		}
		MoveLift(0);
		wait1Msec(300);
		MoveClaw(-30); // opens claw
		powerLift = -20;
		LiftDown(1500, powerLift); // lift down
		wait1Msec(700);
		MoveClaw(0);
		goBack = 290;
		// if (i==3){
		if (i==0){
			goBack = 220;
		}
		MoveValue(goBack, 60); //move back to wall
	}

	wait1Msec(1000);

	int angle = 300;
	TurnValueGyro(angle, 80); // rotates to the center cube
	wait1Msec(globalWaiter);
	//auton
	MoveValue(130, 120); // moves forward to cube

	MoveClaw(120); // closes claw

	wait1Msec(1000); // waits until the claw pickes up the cube

	int powerLift = 40;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(95, 120); // moves forward to the center
	wait1Msec(globalWaiter);

	MoveClaw(50); // holds the claw

	angle = 450;
	TurnValueGyro(angle, -80); // rotates to the wall
	wait1Msec(globalWaiter);

	MoveValue(60, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 105;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	// Done the first part

	powerLift = -20;
	LiftDown(1500, powerLift); // lift down

	powerLift = -15;
	MoveLift(powerLift); // lift up slightly
	MoveClaw(0);

	MoveValue(260, 120); // moves forward to the stars
	wait1Msec(globalWaiter);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	MoveClaw(50); // holds the claw
	powerLift = 50;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(320, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	// try one more time to pick up the stars around the fence


	powerLift = -20;
	LiftDown(1500, powerLift); // lift down

	powerLift = -15;
	MoveLift(powerLift); // holds down the lift slightly
	MoveClaw(0);

	MoveValue(260, 120); // moves forward to the stars
	wait1Msec(globalWaiter);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	MoveClaw(10); // holds the claw
	powerLift = 50;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(320, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	MoveClaw(0); // opens claw

}

void ProgrammingSkill_Extended(){
	int globalWaiter = 200;
	////lockWheel();
	//wait1Msec(300);
	MoveClaw(120); // closes claw

	MoveValue(120, -60); //move back a bit
	wait1Msec(500);
	MoveClaw(0); //stop closing
//	MoveValue(20, 40);//come back forward a little
	// for (int i = 0; i<4; i++){
	for (int i = 0; i<1; i++){
		wait1Msec(1200);
		MoveClaw(120); //start closing
		wait1Msec(1000);
		int powerLift = 30;
		MoveLift(powerLift); // lift up slightly
		wait1Msec(500);
		MoveClaw(20); // holds claw
		int goBack = 290;
		if (i==0){
				goBack = 320;
		}
		MoveValue(goBack, -60); //move back to fence
		powerLift = 105;
		LiftUpNoStop(2500, powerLift);
		MoveClaw(-120);
		if (i>1){
			wait1Msec(180 * ((i+1)/2));
		}
		else{
		wait1Msec(200);
		}
		MoveLift(0);
		wait1Msec(300);
		MoveClaw(-30); // opens claw
		powerLift = -20;
		LiftDown(1500, powerLift); // lift down
		wait1Msec(700);
		MoveClaw(0);
		goBack = 290;
		// if (i==3){
		if (i==0){
			goBack = 220;
		}
		MoveValue(goBack, 60); //move back to wall
	}

	wait1Msec(1000);

	int angle = 300;
	TurnValueGyro(angle, 80); // rotates to the center cube
	wait1Msec(globalWaiter);
	//auton
	MoveValue(130, 120); // moves forward to cube

	MoveClaw(120); // closes claw

	wait1Msec(1000); // waits until the claw pickes up the cube

	int powerLift = 40;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(95, 120); // moves forward to the center
	wait1Msec(globalWaiter);

	MoveClaw(50); // holds the claw

	angle = 450;
	TurnValueGyro(angle, -80); // rotates to the wall
	wait1Msec(globalWaiter);

	MoveValue(60, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 105;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	// Done the first part

	powerLift = -20;
	LiftDown(1500, powerLift); // lift down

	powerLift = -15;
	MoveLift(powerLift); // lift up slightly
	MoveClaw(0);

	MoveValue(260, 120); // moves forward to the stars
	wait1Msec(globalWaiter);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	MoveClaw(50); // holds the claw
	powerLift = 50;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(320, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	// try one more time to pick up the stars around the fence


	powerLift = -20;
	LiftDown(1500, powerLift); // lift down

	powerLift = -15;
	MoveLift(powerLift); // holds down the lift slightly
	MoveClaw(0);

	MoveValue(260, 120); // moves forward to the stars
	wait1Msec(globalWaiter);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	MoveClaw(10); // holds the claw
	powerLift = 50;
	MoveLift(powerLift); // lift up slightly
	wait1Msec(500);

	MoveValue(320, -120); // moves to the wall
	wait1Msec(300);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	//


	powerLift = -20;
	LiftDown(1500, powerLift); // lift down


	MoveValue(130, 120); // moves a little bit


	wait1Msec(1000);

	angle = 1300; // 180 degree?
	TurnValueGyro(angle, 80); // rotates to the stars on the walls
	wait1Msec(globalWaiter);


	MoveValue(130, 120); // moves farward to the stars on the wall


	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars


	MoveValue(130, -120); // moves backward

	powerLift = 105;
	LiftUp(1800, powerLift);


	angle = 1300; // 180 degree?
	TurnValueGyro(angle, 80); // rotates to the stars on the walls
	wait1Msec(1000);


	MoveValue(150, -120); // moves backward
	wait1Msec(1000);

	powerLift = 120;
	LiftUpNoStop(2500, powerLift);
	MoveClaw(-120);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
	MoveClaw(-30); // opens claw

	MoveClaw(0); // opens claw

}

void ClearEncoder() {
	nMotorEncoder[FrontRight] = 0;
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
	// User control code here, inside the loop
	startTask (Move);
	startTask (Lift);
	startTask (Hang);

	while (true)
	{
		wait1Msec(50);

		int btnLCD = nLCDButtons;
		if (btnLCD > 0)
		{
			AutonomousSelector(btnLCD);
			// startTask(displayBatteryLevelOnLCD);
		}


		if (vexRT[Btn6D] == 1)
		{
			// Opens claw
			MoveClaw(-120);
			wait1Msec(100);
			MoveClaw(0);
		}
		if (vexRT[Btn6U] == 1)
		{
			// Closes claw
			MoveClaw(100);
			wait1Msec(120);
			MoveClaw(15);
		}
		if (vexRT[Btn8D] == 1)
		{
			SensorValue[GyroPosition] = 0;
		}
		if (vexRT[Btn8L] == 1)
		{
			// Stops everything
			int power = 0;
			MoveLift(power);
			MoveHanging(power);
			MoveClaw(power);
		}

	}
}


void AutonomousSelector(int btnLCD)
{
	writeDebugStreamLine("AutonomousSelector) button: %d", btnLCD);

	bLCDBacklight=true;

	displayBatteryLevelOnLCD(autonomousMode);
	int autonomousModeValue = autonomousMode;

	int button = 0;
	while(true)
	{
		button = nLCDButtons;

		if (button == 2 || vexRT[Btn8L] == 1)
		{
			displayBatteryLevelOnLCD(autonomousModeValue);

			bLCDBacklight=false;
			break;
		}
		else if (button == 1 || vexRT[Btn6U] == 1)
		{
			if (autonomousModeValue > 1)
			{
				autonomousModeValue--;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
		else if (button == 4 || vexRT[Btn6D] == 1)
		{
			if (autonomousModeValue < 3)
			{
				autonomousModeValue++;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
	}

	bLCDBacklight=false;
}

void DisplayAutonomousMode(int autonomousModeValue)
{
	writeDebugStreamLine("DisplayAutonomousMode) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string text;
	//}
	switch(autonomousModeValue)
	{
	case 1:
		{
			text = "Autonomous";
			break;
		}
	case 2:
		{
			text = "ProgrammingSkill";
			break;
		}
	case 3:
		{
			text = "ProgSkill_Extended";
			break;
		}
	}

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(500);
}

void displayBatteryLevelOnLCD(int autonomousModeValue)
{
	writeDebugStreamLine("displayBatteryLevelOnLCD) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	autonomousMode = autonomousModeValue;

	string text;
	sprintf(text, "Selected: %d", autonomousMode); //Build the value to be displayed

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(800);

	//while(true)                                                        // An infinite loop to keep the program running until you terminate it
	//{
	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string mainBattery, externalBattery;

	//Display the Primary Robot battery voltage
	displayLCDString(0, 0, "Primary: ");
	sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V'); //Build the value to be displayed
	displayNextLCDString(mainBattery);

	//float externalBatteryLevel = SensorValue[ExternalBatteryValue];
	//Display the Backup battery voltage
	displayLCDString(1, 0, "External: ");
	sprintf(externalBattery, "%1.2f%c", (SensorValue[ExternalBatteryValue] * 3.57)/1000.0, 'V');    //Build the value to be displayed
	displayNextLCDString(externalBattery);

	//Short delay for the LCD refresh rate
	wait1Msec(500);
}

int AdjustPowerUsingBatteryLevel(int originalPower)
{
	float batteryLevel = nImmediateBatteryLevel;
	float batteryOffset =	7150 / batteryLevel;
	int adjustedPower = originalPower * batteryOffset;
	//  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	return adjustedPower;
}


task Hang ()
{
	while (true)
	{
		wait1Msec(50);


		if (vexRT[Btn8U] == 1)
		{

			if (vexRT[Btn5U] == 1 && vexRT[Btn5D] == 0)
			{
				// Movies up hanging
				int powerLift = 127;
				MoveHanging(powerLift);
				wait1Msec(100);
				MoveHanging(0);
			}
			else if (vexRT[Btn5D] == 1 && vexRT[Btn5U] == 0)
			{
				// Movies down hanging
				int powerHang = -127;
				MoveHanging(powerHang);
			}
			else if (vexRT[Btn5D] == 1 && vexRT[Btn5U] == 1)
			{
				// Holds hanging
				int powerHang = -40;
				MoveHanging(powerHang);
			}
		}
		//EndTimeSlice();
	}
}

task Lift ()
{
	while (true)
	{
		wait1Msec(50);
		if (vexRT[Btn8D] == 1){
			LockWheel();
		}

		if (vexRT[Btn8R] == 1)
		{
			// Up slowly lift
			int powerLift = 35;
			MoveLift(powerLift);
		}

		if (vexRT[Btn8U] == 0)
		{

			if (vexRT[Btn7U] == 1)
			{
				// Up lift
				int powerLift = 90;
				MoveLift(powerLift);
			}
			if (vexRT[Btn7D] == 1)
			{
				// Down lift
				int powerLift = -50;
				MoveLift(powerLift);
				wait1Msec(50);
				MoveLift(-10);
			}
		}

		else if (vexRT[Btn8U] == 1)
		{

			if (vexRT[Btn7U] == 1)
			{
				// Up lift
				// int powerLift = 120;
				// LiftUp(2800, powerLift);
				// MoveClaw(-120);
				// wait1Msec(500);
				// MoveClaw(0);

				int powerLift = 120;
				LiftUpNoStop(2500, powerLift);
				MoveClaw(-120);
				wait1Msec(100);
				MoveLift(0);
				wait1Msec(300);
				MoveClaw(0);

			}
			if (vexRT[Btn7D] == 1)
			{
				int powerLift = -20;
				LiftDown(1500, powerLift);

				// Down lift
				// Lift(powerLift);
			}
		}
	}
}


void LiftUpNoStop(int distance, int power) {

	while (abs(SensorValue[LiftPosition])<abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	// MoveLift(0);
}

void LiftUp(int distance, int power) {

	while (abs(SensorValue[LiftPosition])<abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	MoveLift(0);
}

void LiftDown(int distance, int power) {

	while (abs(SensorValue[LiftPosition])>abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	MoveLift(0);
}

float adjustValue(float value, float proportion)
{
	float newValue =  proportion * (value / 100);
	return newValue;
}

task Move ()
{
	while (true)
	{
		wait1Msec(50);


		if (vexRT[Btn8U] == 0)
		{
			int shiftPower = 50;

			motor[FrontRight] = -(vexRT[Ch3] - vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			motor[FrontLeft] = (vexRT[Ch3] + vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			motor[BackRight] = -(vexRT[Ch3] - vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			//motor[BackLeft] = adjustValue((vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower, 95);
			motor[BackLeft] = (vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
		}
		else if (vexRT[Btn8U] == 1)
		{
			if (vexRT[Btn7R] == 1)
			{
				int angle = SensorValue[GyroPosition];
				TurnValueGyro(angle, 50);
			}
		}

		if (abs(motor[FrontRight]) < 20)
		{
			GoStraight(0);
		}
		//EndTimeSlice();
	}
}

void MoveValue(int distance, int power) {
	ClearEncoder();
	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(nMotorEncoder[FrontRight])<abs(distance)){
		GoStraight(power);
	}
	GoStraight(0);
}

void GoStraight(int power)
{
	motor[FrontRight] = -power;
	motor[FrontLeft] = power;
	motor[BackRight] = -power;
	motor[BackLeft] = power;
}

void TurnValueGyro(int distance, int power) {
	// wait1Msec(time);
	SensorValue[GyroPosition] = 0;
	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(SensorValue[GyroPosition])<abs(distance)){
		Turn(power);
	}
	Turn(0);
}

void Turn(int power)
{
	motor[FrontRight] = power;
	motor[FrontLeft] = power;
	motor[BackRight] = power;
	motor[BackLeft] = power;
}

void ShiftValue(int distance, int power) {
	ClearEncoder();
	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(nMotorEncoder[FrontRight])<abs(distance)){
		Shift(power);
	}
	Shift(0);
}


void Shift(int power)
{
	motor[FrontRight] = -power;
	motor[FrontLeft] = -power;
	motor[BackRight] = power;
	motor[BackLeft] = power;
}



void MoveLift(int power)
{
	motor[LeftLift] = power;
	motor[RightLift] = power;
}

void MoveHanging(int power)
{
	motor[Hanging1] = power;
	motor[Hanging2] = power;
}
void MoveClaw(int power)
{
	motor[ClawLeft] = power;
	motor[ClawRight] = power;
}
void LockWheel()
{
	MoveHanging(80);
	wait1Msec(300);
	MoveHanging(-80);
	wait1Msec(220);
	MoveHanging(0);
}
