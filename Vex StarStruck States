#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    GyroPosition,   sensorGyro)
#pragma config(Sensor, in3,    LiftPosition,   sensorPotentiometer)
#pragma config(Sensor, in5,    Accel_x,        sensorAccelerometer)
#pragma config(Sensor, in6,    Accel_y,        sensorAccelerometer)
#pragma config(Sensor, in8,    ExternalBatteryValue, sensorAnalog)
#pragma config(Sensor, I2C_1,  Wheel,          sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           ClawRight,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           LeftLift,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           RightLift,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           Hanging1,      tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           Hanging2,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           FrontLeft,     tmotorVex393HighSpeed_MC29, openLoop, encoderPort, I2C_1)
#pragma config(Motor,  port7,           FrontRight,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           BackLeft,      tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           BackRight,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          ClawLeft,      tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

task Move();
task Lift();
task Hang();
task StopAll();

#define C1LX vexRT[Ch4]
#define C1LY vexRT[Ch3]
#define C1RX vexRT[Ch1]


// Autonomous
int globalWaiter = 200;
int globalHoldLiftUp = 45;
int globalHoldLiftDown = -40;
int autonomousMode = 5;
void DisplayAutonomousMode(int autonomousModeValue);
void displayBatteryLevelOnLCD(int autonomousModeValue);
void AutonomousSelector(int btnLCD);
void Autonomous_IEM();
void Autonomous_Accel();
void Autonomous_2SL();
void Autonomous_2SR();
void GetTwoStars(string direction);
void ProgrammingSkill_Extended();
void ProgrammingSkill();
void ProgrammingSkill_StarsAndCube();
void ProgrammingSkill_CubeAndStars();

//void ClearEncoder();
void MoveValue(int distance, int power);
void MoveValue_Accel(int distance, int power);
//void MoveValue_IEM(int distance, int power);
void ShiftValue(int distance, int power);
void ShiftValue_Accel(int distance, int power);
void GoStraight(int power);
void StartFromFencePickThreeStarAndThrow(int distance);
void StartFromFencePickOneStarAndThrow(int distance);
void StartFromFencePickStarAndThrow_Helper(int distance, int retry);
void StartFromFencePickStarAndThrow_Helper_Final(int distance, int retry);

//void StartFromFencePickThreeStarAndThrow_IEM();
void Inspection();


// User Controls
void MoveLift(int power);
void MoveHanging(int power);
void MoveClaw(int power);
void TurnValueGyro(int distance, int power);
void Turn(int power);
void Shift(int power);
void LockWheel();

//float adjustValue(float value, float proportion);
int AdjustPowerUsingBatteryLevel(int originalPower);

void Throw(int distanceLift, int powerThrow);
void LiftUp(int distance, int power);
void LiftUpNoStop(int distance, int power);
void LiftDown(int distance, int power);


void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	//slaveMotor(port6, port7);
	//slaveMotor(port8, port7);
	//slaveMotor(port9, port7);

	//SensorType[GyroPosition] = sensorNone;
	//wait1Msec(1000);
	////Reconfigure Analog Port 8 as a Gyro sensor and allow time for ROBOTC to calibrate it
	//SensorType[GyroPosition] = sensorGyro;
	//wait1Msec(2000);

	SensorValue[GyroPosition] = sensorNone;
	SensorValue[Accel_x] = sensorNone;
	SensorValue[Accel_y] = sensorNone;
	wait1Msec(1000);

	SensorValue[GyroPosition] = sensorGyro;
	SensorType[Accel_x] = sensorAccelerometer;
	SensorType[Accel_y] = sensorAccelerometer;

	// SensorScale[GyroPosition] = 260;
	// SensorScale[GyroPosition] = 100;
	//Adjust SensorFullCount to set the "rollover" point. 3600 sets the rollover point to +/-3600
	SensorFullCount[GyroPosition] = 3600;

	SensorValue[GyroPosition] = 0;
	SensorValue[Accel_x] = 0;
	SensorValue[Accel_y] = 0;
	nMotorEncoder[FrontLeft] = 0;

	// LockWheel();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	long startTime = nPgmTime;

	SensorValue[GyroPosition] = 0;
	nMotorEncoder[FrontLeft] = 0;

	// LockWheel(); // LockWheel should be in the pre_auto

	autonomousMode = 1;

	if (autonomousMode == 1)
	{
		Autonomous_Accel();
		// Autonomous_IEM();
	}
	else if (autonomousMode == 2)
	{
		Autonomous_IEM();
	}
	else if (autonomousMode == 3)
	{
		Autonomous_2SL();
	}
	else if (autonomousMode == 4)
	{
		Autonomous_2SR();
	}
	else if (autonomousMode == 5)
	{
		// ProgrammingSkill_Extended();
		ProgrammingSkill();
	}
	else if (autonomousMode == 6)
	{
		Inspection();
	}
	else
	{
		Autonomous_Accel();
	}

	writeDebugStreamLine("autonomous) Time: %d", nPgmTime - startTime);
}


// .....................................................................................
// Autonomous 1: Knocks two stars on the left side of middle fence
// .....................................................................................

void Autonomous_Accel()
{
	//Auton
	int powerThrow = 90;
	int distanceLift = 2400;

	// MoveClaw(20); // closes claw, Pick a star

	// LockWheel();
	MoveClaw(30);

	MoveValue(175 - 70, -80); //move back a bit
	MoveLift(globalHoldLiftDown); // holds down the lift slightly

	MoveClaw(127); // closes claw, Pick a star
	wait1Msec(1100);
	MoveClaw(50); // Hold claw

	MoveLift(globalHoldLiftUp - 30); // Hold up the lift

	MoveValue(700 + 80, -125); // moves forward to the fence
	wait1Msec(100);

	Throw(distanceLift, powerThrow); // throw a star
	// END: throw a star

	// BEGIN: throw a cube
	int angle = 100;
	TurnValueGyro(angle, 80); // rotates to the cube
	wait1Msec(globalWaiter);

	MoveClaw(-20); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down
	MoveLift(globalHoldLiftDown+10); // holds down the lift slightly
	MoveValue(25 - 25, 120);


	MoveClaw(120);

	// MoveValue(7, 120); //move back a bit
	wait1Msec(1000); // waits until the claw pickes up the cube

	MoveClaw(100); // holds the claw

	Throw(distanceLift, powerThrow); // throw cube
	writeDebugStreamLine("autonomous) Throw Cube: %d", nPgmTime);
	// 10165

	MoveClaw(-25); // opens claw
	// END: throw a cube

	// BEGIN: throw three stars

	StartFromFencePickThreeStarAndThrow(200 - 0);
	// 13862
}


void Autonomous_IEM()
{
	MoveValue(5, 70); // moves forward slightly to drop the preload star
	wait1Msec(globalWaiter);

	MoveClaw(47); // closes claw

	MoveLift(globalHoldLiftDown); // holds down the lift slightly

	ShiftValue(240-20, -120); // shifts right
	wait1Msec(globalWaiter);

	MoveValue(300, 120); // moves forward to cube
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the cube

	MoveLift(globalHoldLiftUp - 5); // lift up slightly

	// MoveValue(70 - 20, 120); // moves forward to the center
	// wait1Msec(globalWaiter);

	MoveClaw(10); // holds the claw

	int angle = 380 - 39;
	TurnValueGyro(angle, -80); // rotates to the wall
	wait1Msec(globalWaiter);

	MoveValue(190, -120); // moves to the fence

	int powerLift = 105 - 10;
	Throw(2500, powerLift);
	writeDebugStreamLine("autonomous) Throw Cube: %d", nPgmTime);
	// 7850
	MoveClaw(-25); // opens claw

	StartFromFencePickThreeStarAndThrow(220-20);
	// 12044
}

void Autonomous_IEM1()
{
	// float offset = 0.2;
	// StartAuto(); //Opens out claw
	//Auton
	// LockWheel();

	// wait1Msec(300);
	MoveClaw(47); // closes claw

	MoveLift(globalHoldLiftDown); // holds down the lift slightly

	ShiftValue(240-20, -120); // shifts right
	wait1Msec(globalWaiter);

	MoveValue(300, 120); // moves forward to cube
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the cube

	MoveLift(globalHoldLiftUp - 5); // lift up slightly
	// wait1Msec(800); //

	MoveValue(70 - 20, 120); // moves forward to the center
	wait1Msec(globalWaiter);

	MoveClaw(10); // holds the claw

	int angle = 380 - 39;
	TurnValueGyro(angle, -80); // rotates to the wall
	wait1Msec(globalWaiter);

	MoveValue(190, -120); // moves to the fence
	// wait1Msec(100);

	int powerLift = 105 - 10;
	Throw(2500, powerLift);
	writeDebugStreamLine("autonomous) Throw Cube: %d", nPgmTime);
	// 8174
	MoveClaw(-25); // opens claw

	/*angle = 30;
	TurnValueGyro(angle, -30); // rotates a bit
	wait1Msec(globalWaiter);*/
	// Done the first part

	StartFromFencePickThreeStarAndThrow(220-20);

	// 12365, 12401

}

void Throw_New(int distanceLift, int distanceThrow, int powerThrow){
	while (abs(SensorValue[LiftPosition])<abs(distanceLift)){
		MoveLift(powerThrow);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}


		if (abs(SensorValue[LiftPosition]) > distanceThrow  ){
			MoveClaw(-120);
		}
	}

	MoveLift(0);
	MoveClaw(0);

	LiftDown(1200, -39);
	MoveLift(-10);
}


void Throw(int distanceLift, int powerThrow){
	LiftUpNoStop(distanceLift, powerThrow); // throw a star
	MoveClaw(-90);
	wait1Msec(100);
	MoveLift(0);
	wait1Msec(300);
}

void StartFromFencePickOneStarAndThrow(int distance){
	StartFromFencePickStarAndThrow_Helper(distance, 1);
}


void StartFromFencePickThreeStarAndThrow(int distance){
	StartFromFencePickStarAndThrow_Helper(distance, 3);
}

void StartFromFencePickStarAndThrow_Helper(int distance, int retry){
	int powerLift = -39;
	int powerThrow = 120;
	int distanceLift = 2800;
	// int localHoldLiftUp = 35;

	LiftDown(1500, powerLift); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveClaw(-20);
	wait1Msec(globalWaiter);

	MoveValue(distance, 100); // moves forward to the stars
	wait1Msec(300);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	if (retry > 1){
		MoveValue(50, -80); // moves bac

		// Open and close
		MoveClaw(-90);
		wait1Msec(400);
		MoveClaw(0);

		MoveValue(60, 80); // moves to the stars
		MoveClaw(120);
		wait1Msec(500);
	}

	MoveLift(globalHoldLiftUp); // lift up slightly
	wait1Msec(300);

	MoveClaw(80); // holds the claw

	MoveValue(880, -100); // moves to the wall
	wait1Msec(100);

	Throw(distanceLift, powerThrow);
	MoveClaw(0); // opens claw
}

void StartFromFencePickStarAndThrow_Helper_Final(int distance, int retry){
	int powerLift = -39;
	int powerThrow = 120;
	int distanceLift = 2800;
	// int localHoldLiftUp = 35;

	LiftDown(1500, powerLift); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveClaw(-20);
	wait1Msec(globalWaiter);

	MoveValue(distance, 100); // moves forward to the stars
	wait1Msec(300);

	MoveClaw(120); // closes claw
	wait1Msec(1000); // waits until the claw pickes up the stars

	if (retry > 1){
		MoveValue(50, -80); // moves bac

		// Open and close
		MoveClaw(-90);
		wait1Msec(400);
		MoveClaw(0);

		MoveValue(100, 80); // moves to the stars
		MoveClaw(120);
		wait1Msec(500);
	}

	MoveLift(globalHoldLiftUp); // lift up slightly
	wait1Msec(300);

	MoveClaw(80); // holds the claw

	MoveValue(700, -100); // moves to the wall
	wait1Msec(100);

	Throw(distanceLift, powerThrow);
	MoveClaw(0); // opens claw
}

//void StartFromFencePickThreeStarAndThrow_IEM(){

//	int powerLift = -30;
//	int powerThrow = 120;
//	int distanceLift = 2500;

//	LiftDown(1500, powerLift); // lift down

//	MoveLift(globalHoldLiftDown); // holds down the lift slightly
//	MoveClaw(-20);
//	wait1Msec(globalWaiter);

//	MoveValue(450, 120); // moves forward to the stars
//	wait1Msec(500);

//	MoveClaw(120); // closes claw
//	wait1Msec(1000); // waits until the claw pickes up the stars

//	MoveValue(50, -80); // moves back

//	MoveClaw(-90);
//	wait1Msec(500);
//	MoveClaw(0);

//	MoveValue(75, 80); // moves to the stars

//	MoveClaw(120);
//	wait1Msec(900);
//	MoveLift(globalHoldLiftUp); // lift up slightly
//	wait1Msec(500);

//	MoveClaw(60); // holds the claw

//	MoveValue(520, -120); // moves to the wall
//	wait1Msec(300);

//	Throw(distanceLift, powerThrow);
//	MoveClaw(0); // opens claw
//}

void Autonomous_2SL() {
	string str = "left";
	GetTwoStars(str);
}

void Autonomous_2SR() {
	string str = "right";
	GetTwoStars(str);
}

void GetTwoStars(string direction){
	int powerTurn = 60;
	if (direction == "right"){
		powerTurn = 60;
	}
	else {
		powerTurn = -60;
	}

	int goBack = 500;
	int localoldLiftDown = -25; //if new rubber bands, adjust value!
	int powerThrow = 75;
	int distanceLift = 2400;

	MoveLift(localoldLiftDown); // holds down the lift slightly
	MoveValue(250, -60);
	ShiftValue(300, powerTurn);
	MoveClaw(120);
	wait1Msec(1000);
	MoveClaw(50);
	wait1Msec(500);
	MoveLift(globalHoldLiftUp); // lift up slightly
	wait1Msec(500);
	GoStraight(-60);

	MoveLift(globalHoldLiftUp);
	wait1Msec(500);
	goBack = 400;
	MoveValue(goBack, -100); //move back to fence
	Throw(distanceLift + 100, powerThrow + 30); // throw stars
	MoveClaw(-20); // opens claw
	LiftDown(1500, localoldLiftDown); // lift down
	MoveClaw(0);
}

void ProgrammingSkill(){
	int goBack = 500;
	int localoldLiftDown = -39; //if new rubber bands, adjust value!
	int powerThrow = 120;
	int distanceLift = 3200;
	int distanceThrow = 2600;
	// int

	// LockWheel();

	writeDebugStreamLine("Started ===========");

	MoveLift(globalHoldLiftDown); // holds down the lift slightly

	MoveValue(180, -60); //move back a bit

	wait1Msec(200);
	MoveClaw(50); // closes claw

	for (int i = 0; i < 3; i++){
		wait1Msec(1000);

		// wait1Msec(1200);
		MoveClaw(120); //start closing
		wait1Msec(1000);
		// if (i == 0) {
		// 	MoveValue(50, -60); //move back a bit
		// }

		MoveClaw(50); // holds claw
		GoStraight(-60);

		//while (SensorValue(LiftPosition) < 1300){
		//if (vexRT[Btn7U]==1){
		//	MoveLift(100);
		//}
		MoveLift(globalHoldLiftUp);
		// }
		wait1Msec(300);
		goBack = 420;
		if (i == 0) {
			goBack = 500;
		}
		if (i == 2) {
			goBack = 300;
		}

		MoveValue(goBack, -100); //move back to fence

		// MoveClaw(-35); // claw opens too wide?
		// wait1Msec(400);
		// MoveLift(0);
		// wait1Msec(300);

		// MoveClaw(-20); // opens claw

		if (i < 2) {
			Throw_New(distanceLift, distanceThrow, powerThrow); // throw stars
			// MoveClaw(-50);
		}
		else {
			Throw(2800, 120); // throw stars
			wait1Msec(200);
		}
		int clawPower = -30;
		if (i == 1) {
			MoveClaw(clawPower);
		}
		MoveClaw(-25);
		int goBackWall = 280;
		if (i == 2) {
			goBackWall = 0;
			MoveClaw(0);
		}
		MoveValue(goBackWall, 100); //move back to wall
		// should be done in 20 secs
	}
	wait1Msec(1000);

	MoveClaw(70); // close claw
	wait1Msec(800);
	MoveClaw(0);
	LiftDown(2000, localoldLiftDown + 16); // lift down
	MoveValue(150-125, 60); //move forward so that we don't hit the fence post
	wait1Msec(1000);
	TurnValueGyro(790 - 100, 40); //90 degrees is around 440
	wait1Msec(1000);

	MoveValue(80 - 10, -80); // moves back
	wait1Msec(1000);

	LiftDown(1300, localoldLiftDown); // lift down

	MoveLift(localoldLiftDown); // hold lift down

	wait1Msec(1000);

	MoveClaw(-35); // open claw
	wait1Msec(300);
	// MoveClaw(-25); // hold claw

	MoveValue(670 + 60, 120); // moves forward to stars
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the stars


	MoveLift(globalHoldLiftUp); // lift up slightly

	MoveClaw(40); // holds the claw

	wait1Msec(800);


	// MoveLift(globalHoldLiftUp - 10); // lift up slightly

	// wait1Msec(100);


	int angle = 300+30;
	TurnValueGyro(angle, -70); // rotates to the wall
	wait1Msec(1000);


	MoveValue(140, -100);  // moves to the fence // if we throw too early? shorten the distance
	wait1Msec(300);

	Throw(2800, 127); // throw stars
	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveClaw(-20);
	wait1Msec(globalWaiter);



	MoveValue(120-20, 120); // moves towards the cube
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the cube

	MoveLift(globalHoldLiftUp); // lift up slightly
	wait1Msec(800);

	MoveClaw(10); // holds the claw

	MoveValue(100-100, -100); // moves to the fence
	wait1Msec(300);

	Throw(distanceLift, powerThrow); // throw cube
	MoveClaw(-25); // opens claw

	StartFromFencePickThreeStarAndThrow(420 - 180);

	// wait1Msec(1000); // do we need this?

	ProgrammingSkill_CubeAndStars();
	// ProgrammingSkill_StarsAndCube();
}

void ProgrammingSkill_CubeAndStars(){


	int localoldLiftDown = -39;

	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveValue(300 + 50, 100); // moves forward to cube

	MoveClaw(0); // opens claw

	ShiftValue(900-170 + 0, -120); // shifts right
	wait1Msec(globalWaiter);

	StartFromFencePickOneStarAndThrow(150);


	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveValue(300, 100); // moves forward to cube

	MoveClaw(0); // opens claw

	ShiftValue(220-100, -120); // shifts right
	wait1Msec(globalWaiter);

	StartFromFencePickThreeStarAndThrow(150);

}

void ProgrammingSkill_StarsAndCube(){

	int localoldLiftDown = -39;

	MoveClaw(70); // close claw
	wait1Msec(800);
	MoveClaw(0);

	MoveValue(150, 40); //move forward so that we don't hit the fence post
	wait1Msec(1000);
	TurnValueGyro(790, 40); //90 degrees is around 440
	wait1Msec(1000);

	LiftDown(1300, localoldLiftDown); // lift down

	MoveLift(localoldLiftDown); // hold lift down

	// wait1Msec(1000); // why do we need this?

	MoveClaw(-38); // open claw
	wait1Msec(300);
	// MoveClaw(-25); // hold claw

	MoveValue(800, 120); // moves forward to stars
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the stars
	MoveClaw(40); // holds the claw


	// MoveLift(globalHoldLiftUp - 10); // lift up slightly

	// wait1Msec(100);


	int angle = 500;
	TurnValueGyro(angle, -70); // rotates to the wall
	wait1Msec(500);

	MoveClaw(-120); // opens claw

	wait1Msec(1000);

	StartFromFencePickOneStarAndThrow(520);
}

void ProgrammingSkill_CubeAndStarsShort(){

	int localoldLiftDown = -39;

	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveValue(300, 100); // moves forward to cube

	MoveClaw(0); // opens claw

	ShiftValue(770, -120); // shifts right
	wait1Msec(globalWaiter);

	StartFromFencePickOneStarAndThrow(250);
	// wait1Msec(1000); // do we need this?


	///////////////////////////////////
	// starts for the last 2 stars
	// 1st star

	MoveClaw(35); // close claw
	wait1Msec(300);
	MoveClaw(0);

	MoveValue(150, 40); //move forward so that we don't hit the fence post
	wait1Msec(500);
	TurnValueGyro(650, 40); //90 degrees is around 440
	wait1Msec(500);

	MoveValue(50, -80); // moves back
	// wait1Msec(600);

	LiftDown(1300, localoldLiftDown); // lift down

	MoveLift(localoldLiftDown); // hold lift down

	// wait1Msec(500);

	MoveClaw(-70); // open claw
	wait1Msec(100);
	// MoveClaw(-25); // hold claw

	MoveValue(300, 60); // moves forward to stars
	MoveClaw(120);
	wait1Msec(200); // waits until the claw pickes up the stars
	MoveValue(50, -80); // moves back
	wait1Msec(200); // waits until the claw pickes up the stars

	MoveClaw(40); // holds the claw

	MoveLift(globalHoldLiftUp - 20); // lift up slightly

	wait1Msec(100);


	int angle = 500;
	TurnValueGyro(angle, -70); // rotates to the wall
	wait1Msec(300); // do we need this?

	MoveValue(140, -100);  // moves to the fence // if we throw too early? shorten the distance
	wait1Msec(300);

	Throw(2800, 127); // throw stars
	MoveClaw(0); // opens claw



	// for 2 stars
	/*
	ShiftValue(70, -120); // shifts right
	wait1Msec(globalWaiter);

	MoveClaw(-120);
	wait1Msec(300);

	StartFromFencePickStarAndThrow_Helper_Final(600, 1);
	*/


}

void ProgrammingSkill_Extended(){
	int goBack = 500;
	int localoldLiftDown = -25; //if new rubber bands, adjust value!
	int powerThrow = 75;
	int distanceLift = 2400;

	// LockWheel();

	writeDebugStreamLine("Started ===========");

	MoveLift(globalHoldLiftDown); // holds down the lift slightly

	MoveValue(180, -60); //move back a bit

	wait1Msec(1000);
	MoveClaw(50); // closes claw

	for (int i = 0; i < 3; i++){
		wait1Msec(1000);

		// wait1Msec(1200);
		MoveClaw(120); //start closing
		wait1Msec(1000);
		// if (i == 0) {
		// 	MoveValue(50, -60); //move back a bit
		// }

		MoveClaw(50); // holds claw
		GoStraight(-60);

		//while (SensorValue(LiftPosition) < 1300){
		//if (vexRT[Btn7U]==1){
		//	MoveLift(100);
		//}
		MoveLift(globalHoldLiftUp);
		// }
		wait1Msec(500);
		goBack = 250;
		if (i == 0) {
			goBack = 400;
		}

		MoveValue(goBack, -100); //move back to fence

		Throw(distanceLift + 100, powerThrow + 30); // throw stars
		// MoveClaw(-35); // claw opens too wide?
		// wait1Msec(400);
		// MoveLift(0);
		// wait1Msec(300);

		MoveClaw(-20); // opens claw
		if (i < 2) {
			LiftDown(1500, localoldLiftDown); // lift down
			MoveLift(localoldLiftDown); // holds down the lift slightly
		}
		wait1Msec(700);
		MoveClaw(0);
		int goBackWall = 350;
		if (i == 2) {
			goBackWall = 0;
		}
		MoveValue(goBackWall, 100); //move back to wall
	}

	wait1Msec(1000);

	MoveClaw(50); // close claw
	wait1Msec(800);
	MoveClaw(0);

	MoveValue(150, 40); //move forward so that we don't hit the fence post
	wait1Msec(1000);
	TurnValueGyro(700, 40); //90 degrees is around 440
	wait1Msec(1000);

	MoveValue(45, -80); // moves back
	wait1Msec(1000);

	LiftDown(1300, localoldLiftDown); // lift down

	MoveLift(localoldLiftDown); // hold lift down

	wait1Msec(1000);

	MoveClaw(-33); // open claw
	wait1Msec(400);
	// MoveClaw(-25); // hold claw

	MoveValue(670, 120); // moves forward to stars
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the stars


	MoveLift(globalHoldLiftUp); // lift up slightly

	MoveClaw(40); // holds the claw

	wait1Msec(800);


	// MoveLift(globalHoldLiftUp - 10); // lift up slightly

	// wait1Msec(100);


	int angle = 450;
	TurnValueGyro(angle, -70); // rotates to the wall
	wait1Msec(1000);


	MoveValue(150, -60);  // moves to the fence // if we throw too early? shorten the distance
	wait1Msec(300);

	Throw(distanceLift + 100, powerThrow + 30); // throw stars
	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveClaw(-20);
	wait1Msec(globalWaiter);



	MoveValue(100, 120); // moves forward to cube
	MoveClaw(120);
	wait1Msec(800); // waits until the claw pickes up the cube

	MoveLift(globalHoldLiftUp); // lift up slightly
	wait1Msec(800);

	MoveClaw(10); // holds the claw

	MoveValue(130, -120); // moves to the fence
	wait1Msec(300);

	Throw(distanceLift, powerThrow); // throw cube
	MoveClaw(-25); // opens claw

	StartFromFencePickThreeStarAndThrow(390);


	MoveClaw(-25); // opens claw

	LiftDown(1500, globalHoldLiftDown); // lift down

	MoveLift(globalHoldLiftDown); // holds down the lift slightly
	MoveValue(300, 120); // moves forward to cube

	MoveClaw(0); // opens claw

	ShiftValue(550, -120); // shifts right
	wait1Msec(globalWaiter);

	StartFromFencePickOneStarAndThrow(180);
	wait1Msec(1000);

	///////////////////////////////////
	// starts for the last 2 stars
	// 1st star

	MoveClaw(50); // close claw
	wait1Msec(800);
	MoveClaw(0);

	MoveValue(150, 40); //move forward so that we don't hit the fence post
	wait1Msec(500);
	TurnValueGyro(700, 40); //90 degrees is around 440
	wait1Msec(500);

	MoveValue(45, -80); // moves back
	wait1Msec(500);

	LiftDown(1300, localoldLiftDown); // lift down

	MoveLift(localoldLiftDown); // hold lift down

	wait1Msec(500);

	MoveClaw(-39); // open claw
	wait1Msec(200);
	// MoveClaw(-25); // hold claw

	MoveValue(150, 80); // moves forward to stars
	MoveClaw(120);
	wait1Msec(500); // waits until the claw pickes up the stars


	// MoveLift(globalHoldLiftUp); // lift up slightly

	// MoveClaw(40); // holds the claw

	// wait1Msec(100);


	angle = 450;
	TurnValueGyro(angle, -70); // rotates to the wall
	wait1Msec(1000);


	StartFromFencePickThreeStarAndThrow(390);


}

//void test(){
/*

MoveClaw(50); // close claw
wait1Msec(800);
MoveClaw(0);

MoveValue(150, 40); //move forward so that we don't hit the fence post
wait1Msec(1000);
TurnValueGyro(700, 40); //90 degrees is around 440
wait1Msec(1000);

MoveValue(45, -80); // moves back
wait1Msec(1000);

LiftDown(1300, localoldLiftDown); // lift down

MoveLift(localoldLiftDown); // hold lift down

wait1Msec(1000);

MoveClaw(-33); // open claw
wait1Msec(400);
// MoveClaw(-25); // hold claw

MoveValue(150, 40); // moves forward to stars
MoveClaw(120);
wait1Msec(800); // waits until the claw pickes up the stars


MoveLift(globalHoldLiftUp); // lift up slightly

MoveClaw(40); // holds the claw

wait1Msec(100);


int angle = 450;
TurnValueGyro(angle, -70); // rotates to the wall
wait1Msec(1000);


MoveValue(150, -60);  // moves to the fence // if we throw too early? shorten the distance
wait1Msec(300);

Throw(distanceLift + 100, powerThrow + 30); // throw stars
MoveClaw(-25); // opens claw

// 2nd star



StartFromFencePickOneStarAndThrow(390);

*/
//}


void Inspection(){

	GoStraight(50);
	wait1Msec(1000);
	GoStraight(0);
}

//void ClearEncoder() {
//	writeDebugStreamLine("ClearEncoder");
//	nMotorEncoder[FrontLeft] = 0;
//	// SensorValue[Wheel] = 0;
//}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task usercontrol()
{
	// User control code here, inside the loop
	startTask (Move);
	startTask (Lift);
	startTask (Hang);
	startTask (StopAll);

	while (true)
	{
		wait1Msec(50);

		int btnLCD = nLCDButtons;
		if (btnLCD > 0)
		{
			AutonomousSelector(btnLCD);
			// startTask(displayBatteryLevelOnLCD);
		}


		if (vexRT[Btn6D] == 1)
		{
			// Opens claw
			if ((SensorValue[LiftPosition]) < 1500)
			{
				int powerLift = -20;
				MoveLift(powerLift);
			}
			MoveClaw(-120);
			wait1Msec(100);
			MoveClaw(0);

		}
		if (vexRT[Btn6U] == 1)
		{
			// Closes claw
			if ((SensorValue[LiftPosition]) < 1500)
			{
				int powerLift = -20;
				MoveLift(powerLift);
			}
			MoveClaw(120);
			wait1Msec(120);
			MoveClaw(39);
		}
		//motor[FrontLeft] = -C1LY - C1LX - C1RX;
		//motor[FrontRight] =  C1LY - C1LX - C1RX;
		//motor[BackRight] =  C1LY + C1LX - C1RX;
		//motor[BackLeft] = -C1LY + C1LX - C1RX;

		// Motor values can only be updated every 20ms
		//wait10Msec(2);
	}
}


void AutonomousSelector(int btnLCD)
{
	writeDebugStreamLine("AutonomousSelector) button: %d", btnLCD);

	bLCDBacklight=true;

	displayBatteryLevelOnLCD(autonomousMode);
	int autonomousModeValue = autonomousMode;

	int button = 0;
	while(true)
	{
		button = nLCDButtons;

		if (button == 2 || vexRT[Btn8L] == 1)
		{
			displayBatteryLevelOnLCD(autonomousModeValue);

			bLCDBacklight=false;
			break;
		}
		else if (button == 1 || vexRT[Btn6U] == 1)
		{
			if (autonomousModeValue > 1)
			{
				autonomousModeValue--;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
		else if (button == 4 || vexRT[Btn6D] == 1)
		{
			if (autonomousModeValue < 6)
			{
				autonomousModeValue++;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
	}

	bLCDBacklight=false;
}

void DisplayAutonomousMode(int autonomousModeValue)
{
	writeDebugStreamLine("DisplayAutonomousMode) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string text;
	//}
	switch(autonomousModeValue)
	{
	case 1:
		{
			text = "Autonomous_New";
			break;
		}
	case 2:
		{
			//text = "ProgrammingSkill";
			text = "Autonomous_Old";
			break;
		}
	case 3:
		{
			text = "Autonomous_2SL";
			break;
		}
	case 4:
		{
			text = "Autonomous_2SR";
			break;
		}
	case 5:
		{
			text = "ProgSkill_Extended";
			break;
		}
	case 6:
		{
			text = "Inspection";
			break;
		}
	}

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(500);
}

void displayBatteryLevelOnLCD(int autonomousModeValue)
{
	writeDebugStreamLine("displayBatteryLevelOnLCD) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	autonomousMode = autonomousModeValue;

	string text;
	sprintf(text, "Selected: %d", autonomousMode); //Build the value to be displayed

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(800);

	//while(true)                                                        // An infinite loop to keep the program running until you terminate it
	//{
	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string mainBattery, externalBattery;

	//Display the Primary Robot battery voltage
	displayLCDString(0, 0, "Primary: ");
	sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V'); //Build the value to be displayed
	displayNextLCDString(mainBattery);

	//float externalBatteryLevel = SensorValue[ExternalBatteryValue];
	//Display the Backup battery voltage
	displayLCDString(1, 0, "External: ");
	sprintf(externalBattery, "%1.2f%c", (SensorValue[ExternalBatteryValue] * 3.57)/1000.0, 'V');    //Build the value to be displayed
	displayNextLCDString(externalBattery);

	//Short delay for the LCD refresh rate
	wait1Msec(500);
}

int AdjustPowerUsingBatteryLevel(int originalPower)
{
	float batteryLevel = nImmediateBatteryLevel;
	float batteryOffset =	7150 / batteryLevel;
	int adjustedPower = originalPower * batteryOffset;
	//  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	return adjustedPower;
}

task StopAll ()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8L] == 1)
		{
			// Stops everything
			int power = 0;
			MoveLift(power);
			MoveHanging(power);
			MoveClaw(power);
		}
	}
}

task Hang ()
{
	while (true)
	{
		wait1Msec(50);


		if (vexRT[Btn8U] == 1)
		{
			if (vexRT[Btn6D] == 1)
			{
				// Movies up hanging
				int powerHang = 127;
				MoveHanging(powerHang);
				wait1Msec(700);
				MoveHanging(-30);
				wait1Msec(200);
				MoveHanging(powerHang);
				wait1Msec(1000);
				powerHang = 80;
				MoveHanging(powerHang);
				wait1Msec(430);
				MoveHanging(20);

			}
		}
		if (vexRT[Btn8U] == 1)
		{

			if (vexRT[Btn5U] == 1 && vexRT[Btn5D] == 0)
			{
				// Movies up hanging
				int powerLift = 50;
				MoveHanging(powerLift);
				wait1Msec(100);
				MoveHanging(20);
			}
			else if (vexRT[Btn5D] == 1 && vexRT[Btn5U] == 0)
			{
				// Movies down hanging
				int powerHang = -127;
				MoveHanging(powerHang);
			}
			else if (vexRT[Btn5D] == 1 && vexRT[Btn5U] == 1)
			{
				// Holds hanging
				int powerHang = -40;
				MoveHanging(powerHang);
			}
		}
		//EndTimeSlice();
	}
}

task Lift ()
{
	while (true)
	{
		wait1Msec(50);
		if (vexRT[Btn8D] == 1){
			LockWheel();
		}

		if (vexRT[Btn8R] == 1)
		{
			// Up slowly lift
			int powerLift = 65;
			while (SensorValue(LiftPosition)<1600/*&&(vexRT[Btn7U]==0)*/){
				//if (vexRT[Btn7U]==1){
				//	MoveLift(100);
				//}
				MoveLift(powerLift);
			}
			MoveLift(20);
		}

		if (vexRT[Btn8U] == 0)
		{

			if (vexRT[Btn7U] == 1)
			{
				// Up lift
				// int powerLift = 120;
				// LiftUp(2800, powerLift);
				// MoveClaw(-120);
				// wait1Msec(500);
				// MoveClaw(0);


				// 3200, 2600
				int powerLift = 120;
				while (abs(SensorValue[LiftPosition])<abs(3200)){
					MoveLift(powerLift);
					if (vexRT[Btn8L] == 1)
					{
						break;
					}


					if (abs(SensorValue[LiftPosition]) > 2600  ){
						MoveClaw(-120);
					}
				}

				MoveLift(0);
				MoveClaw(0);

				LiftDown(1200, -39);
				MoveLift(-10);



			}
			if (vexRT[Btn7D] == 1)
			{
				// Down lift
				int powerLift = -55;
				MoveLift(powerLift);
				wait1Msec(50);
				if ((SensorValue[LiftPosition]) < 1500)
				{
					int powerLift = -20;
					MoveLift(powerLift);
				}
				MoveLift(-20);
			}
		}

		else if (vexRT[Btn8U] == 1)
		{

			if (vexRT[Btn7U] == 1)
			{
				// Up lift

				int powerLift = 120;
				MoveLift(powerLift);

			}
			if (vexRT[Btn7D] == 1)
			{
				int powerLift = -38;
				LiftDown(1160, powerLift);
				if ((SensorValue[LiftPosition]) < 1500)
				{
					int powerLift = -20;
					MoveLift(powerLift);
				}

				// Down lift
				// Lift(powerLift);
			}
			if (vexRT[Btn7R] == 1)
			{
				// Set position to knock down stars
				int position = 1730;
				if ((SensorValue[LiftPosition]) < position)
				{
					// Up
					MoveClaw(-80);
					int powerLift = 35;
					LiftUp(position, powerLift);
					MoveClaw(-50);
					wait1Msec(500);
					MoveClaw(0);
					powerLift = -35;
					LiftDown(1150, powerLift);
					MoveLift(-25);

				}
				else
				{
					// Down
					int powerLift = -20;
					LiftDown(position, powerLift);
				}
				// Down lift
				// Lift(powerLift);
			}
			if (vexRT[Btn7L] == 1)
			{
				// Up

				MoveClaw(100);
				wait1Msec(250);

				int powerLift = 45;
				MoveLift(powerLift);

				wait1Msec(350);

				MoveClaw(0);
				MoveLift(0);
				// Down lift
				// Lift(powerLift);
			}
		}
	}
}


void LiftUpNoStop(int distance, int power) {

	while (abs(SensorValue[LiftPosition])<abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	// MoveLift(0);
}

void LiftUp(int distance, int power) {

	while (abs(SensorValue[LiftPosition])<abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	MoveLift(0);
}

void LiftDown(int distance, int power) {

	while (abs(SensorValue[LiftPosition])>abs(distance)){
		MoveLift(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	MoveLift(0);
}

//float adjustValue(float value, float proportion)
//{
//	float newValue =  proportion * (value / 100);
//	return newValue;
//}

task Move ()
{
	while (true)
	{
		wait1Msec(50);

		//int currentValue = SensorValue[GyroPosition];
		SensorValue[GyroPosition] = 0;

		if (vexRT[Btn8U] == 0)
		{
			int shiftPower = 50;

			motor[FrontRight] = -(vexRT[Ch3] - vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			motor[FrontLeft] = (vexRT[Ch3] + vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			motor[BackRight] = -(vexRT[Ch3] - vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			//motor[BackLeft] = adjustValue((vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower, 95);
			motor[BackLeft] = (vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;

			/*
			int p_FrontRight = -(vexRT[Ch3] - vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			int p_FrontLeft = (vexRT[Ch3] + vexRT[Ch1]) - (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			int p_BackRight = -(vexRT[Ch3] - vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;
			//motor[BackLeft] = adjustValue((vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower, 95);
			int p_BackLeft = (vexRT[Ch3] + vexRT[Ch1]) + (vexRT[Btn7L] - vexRT[Btn7R]) * shiftPower;



			if (abs(p_FrontRight) > 30)
			{
			motor[FrontRight] = p_FrontRight;
			motor[FrontLeft] = p_FrontLeft;
			motor[BackRight] = p_BackRight;
			motor[BackLeft] = p_BackLeft;

			wait1Msec(200);

			int p = 0;
			motor[FrontRight] = p;
			motor[FrontLeft] = p;
			motor[BackRight] = p;
			motor[BackLeft] = p;

			// int angle = SensorValue[GyroPosition];
			// if (abs(angle) > 200)
			// {
			// 	TurnValueGyro(angle, 50);
			// }
			}
			*/


			// int position = nMotorEncoder[FrontLeft];
			// writeDebugStreamLine("MoveValue_IEM) pos: %d", abs(position));
		}

		//if (vexRT[Btn5U] == 1)
		//{
		//	// if (vexRT[Btn7R] == 1)
		//	// {
		//	//int angle = SensorValue[GyroPosition];
		//	int angle = 900;
		//	TurnValueGyro(angle, 50);
		//	// }
		//}

		if (abs(motor[FrontRight]) < 25)
		{
			GoStraight(0);
		}
		//EndTimeSlice();
	}
}


void MoveValue(int distance, int power) {
	MoveValue_Accel(distance, power);
	// MoveValue_IEM(distance, power);
}

void MoveValue_Accel(int distance, int power) {
	// ClearEncoder();

	//writeDebugStreamLine("MoveValue_Accel) Started ===");
	//const float offset = 0.8;
	//float distance = distance_or * offset;

	int velocity = 0;
	int position = 0;
	int value = 0;
	clearTimer(T3);
	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(position) < abs(distance)){
		value = SensorValue[Accel_y];
		velocity += value;
		//velocity = (value == 0)? velocity : velocity + value;
		position += velocity;

		// writeDebugStreamLine("MoveValue_Accel) pos: %d, dis: %d ", position, distance);
		if (time1[T3] >= 2000)
		{
			break;
		}
		GoStraight(power);
		wait1Msec(100);
	}
	GoStraight(0);
}

//void MoveValue_IEM(int distance, int power) {
//	ClearEncoder();
//	clearTimer(T3);
//	int position = nMotorEncoder[FrontLeft];
//	power = AdjustPowerUsingBatteryLevel(power);
//	while (abs(position)<abs(distance)){
//		position = nMotorEncoder[FrontLeft];
//		writeDebugStreamLine("MoveValue_IEM_1) pos: %d, vel: %d ", position, distance);

//		if (time1[T3] >= 2000)
//		{
//			break;
//		}
//		GoStraight(power);
//	}
//	GoStraight(0);
//}

void GoStraight(int power)
{
	motor[FrontRight] = -power;
	motor[FrontLeft] = power;
	motor[BackRight] = -power;
	motor[BackLeft] = power;
}

void TurnValueGyro(int distance, int power) {
	// wait1Msec(time);
	SensorValue[GyroPosition] = 0;
	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(SensorValue[GyroPosition])<abs(distance)){
		Turn(power);
	}
	Turn(0);
}

void Turn(int power)
{
	motor[FrontRight] = power;
	motor[FrontLeft] = power;
	motor[BackRight] = power;
	motor[BackLeft] = power;
}

void ShiftValue(int distance, int power) {
	ShiftValue_Accel(distance, power);
}

void ShiftValue_Accel(int distance, int power) {
	int velocity = 0;
	int position = 0;
	int value = 0;

	power = AdjustPowerUsingBatteryLevel(power);
	while (abs(position)<abs(distance)){
		value = SensorValue[Accel_x];
		velocity += value;
		position += velocity;


		Shift(power);
		wait1Msec(100);
	}
	Shift(0);
}

//void ShiftValue_IEM(int distance, int power) {
//	ClearEncoder();
//	power = AdjustPowerUsingBatteryLevel(power);
//	while (abs(nMotorEncoder[FrontLeft])<abs(distance)){
//		// while (abs(SensorValue[Wheel])<abs(distance)){
//		// writeDebugStreamLine("ShiftValue) pos: %d, vel: %d ", abs(nMotorEncoder[FrontLeft]), distance);

//		Shift(power);
//	}
//	Shift(0);
//}


void Shift(int power)
{
	motor[FrontRight] = -power;
	motor[FrontLeft] = -power;
	motor[BackRight] = power;
	motor[BackLeft] = power;
}



void MoveLift(int power)
{
	motor[LeftLift] = power;
	motor[RightLift] = power;
}

void MoveHanging(int power)
{
	motor[Hanging1] = power;
	motor[Hanging2] = power;
}
void MoveClaw(int power)
{
	motor[ClawLeft] = power;
	motor[ClawRight] = power;
}
void LockWheel()
{
	MoveHanging(80);
	wait1Msec(300);
	MoveHanging(-80);
	wait1Msec(220);
	MoveHanging(0);
}
