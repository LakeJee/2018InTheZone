


/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	startTask (Move);

	while(true)
	{
		if (vexRT[Btn6U] == 1)
		{
			MoveClaw(100);
			wait1Msec(1);
			MoveClaw(10);
		}
		if (vexRT[Btn6D] == 1)
		{
			MoveClaw(-100);
			wait1Msec(10);
			MoveClaw(-5);
		}
		if (vexRT[Btn7U] == 1)
		{
			LiftUp(80);
			wait1Msec(10);
			LiftUp(40);
		}
		if (vexRT[Btn7D] == 1)
		{
			LiftUp(-80);
			wait1Msec(10);
			LiftUp(-20);
		}
		if (vexRT[Btn8L] == 1)
		{
			StopAll();
		}
	}
}



void LiftUp (int power)
{
	motor[leftTop] =	power;
	motor[leftBot] = power;
	motor[rightTop] = power;
	motor[rightBot] = power;
	motor[leftThird]= power;
	motor[rightThird] = power;

}
void MoveClaw (int ClawPower)
{
	motor[claw]= ClawPower;
}

void StopAll()
{
	motor[claw] = 0;

	motor[leftTop] =	0;
	motor[leftBot] = 0;
	motor[rightTop] = 0;
	motor[rightBot] = 0;
	motor[rightThird] = 0;
	motor[leftThird] = 0;
}


void StopMove()
{
	motor[leftWheel] = 0;
	motor[rightWheel] = 0;
}

void StartAuto()
{
	MoveClaw(60);
	wait1Msec(400);
	MoveClaw(-100);
	wait1Msec(400);
	MoveClaw(-40);
}

void GoStraight(int movePower)
{
	motor[leftWheel] = -movePower;
	motor[rightWheel] = -movePower;
}
void TurnLeft(int turnPower)
{
	motor[leftWheel] = turnPower;
	motor[rightWheel] = -turnPower;
}

void TurnRight(int turnPower)
{
	motor[leftWheel] = -turnPower;
	motor[rightWheel] = turnPower;
}

void ClearEncoder() {
	nMotorEncoder[rightWheel] = 0;
}

void MoveValue(int distance, int power) {
	ClearEncoder();
	while (abs(nMotorEncoder[rightWheel])<abs(distance)){
		GoStraight(power);
	}
		GoStraight(0);
}

void UpValue(int distance, int power) {
		while (SensorValue(Lift)>distance){
		LiftUp(power);
		}
		LiftUp(0);
}
void DownValue(int distance, int power){
		while (SensorValue(Lift) < distance) {
		LiftUp(power);
		}
		LiftUp(0);
	}
void TurnValue(int distance, int power) {
	ClearEncoder();
	while (abs(nMotorEncoder[rightWheel])<abs(distance)){
		TurnRight(power);
	}
		GoStraight(0);
}

task Move ()
{
	while (true)
	{
		motor[leftWheel] = -(vexRT[Ch3] + vexRT[Ch1]);
		motor[rightWheel] = -(vexRT[Ch3] - vexRT[Ch1]);

		EndTimeSlice();
	}
}
