#pragma config(Sensor, in1,    ExternalBatteryValue, sensorAnalog)
#pragma config(Sensor, in2,    GyroPosition,   sensorGyro)
#pragma config(Sensor, in3,    liftPosition,   sensorPotentiometer)
#pragma config(Sensor, in4,    colorValue,     sensorReflection)
#pragma config(Sensor, in6,    clawLiftPosition, sensorPotentiometer)
#pragma config(Sensor, in7,    mobileLiftPosition, sensorPotentiometer)
#pragma config(Sensor, in8,    Accel_x,        sensorAccelerometer)
#pragma config(Sensor, dgtl1,  clawLiftUp,     sensorTouch)
#pragma config(Sensor, dgtl3,  clawLiftDown,   sensorNone)
#pragma config(Sensor, dgtl4,  liftDown,       sensorTouch)
#pragma config(Sensor, dgtl5,  mobileLiftDown, sensorTouch)
#pragma config(Sensor, dgtl6,  stationaryGoal, sensorTouch)
#pragma config(Sensor, dgtl11, coneHeight,     sensorNone)
#pragma config(Sensor, dgtl12, clawLiftPosition, sensorNone)
#pragma config(Motor,  port1,           clawMotor,     tmotorVex393HighSpeed_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           wheelLeft,     tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           wheelRight,    tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           clawLiftL,     tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           clawLiftR,     tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           armLiftLeftB,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port7,           armLiftLeftT,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           armLiftRightB, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port9,           armLiftRightT, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          mobileLift,    tmotorVex393HighSpeed_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//COLOR CODING!
//clawMotor = puke
//wheelLeftFront = skyblue
//wheelLeftBack = oceanblue
//wheelRightFront = palepink
//wheelRightBack = flamingopink
//clawLiftL = neongreen
//clawLiftR = darkgreen
//armLiftLeftB
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/
//When the potentiometer value is changed, make sure you check the actual
//sensor values and change the program values accordingly
//7D is MinLift, 7R LiftPickMobile, 8D FeedLift
// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

const int MAX_CLAWLIFT = 3600;
const int MIN_CLAWLIFT = 2100;
const int MAX_MOBILELIFT = 3900;
const int REDUCE_MOBILELIFT = 3200;  //2800;
const int STOP_MOBILELIFT = 2800;
const int HIGHGOAL_MOBILELIFT = 2800;

// const int MAX_LIFT = 1600;
const int MAX_LIFT = 3800;
const int MIN_LIFT = 2040; //620
const int FEED_LIFT = 2640;
const int LIFT_PICK_MOBILE = 2200;
const int STATIONARY_LIFT = 2800 + 100;

const int FEED_CLAWLIFT = 2200;
const int GLOBAL_WAITER = 100;


int autonomousMode = 1;

const int POWER_CLAW_OPEN = 60;

const int FULLPOWER = 127;
const int powerliftUp = 120;
const int powerliftDown = 120;
const int powerMobileLift = 120;

const int powerClawLiftUp = 100;
const int powerClawLiftDown = 80;

string LIFT_STATUS = "";

int CONE_COUNT = 0;
int CONE_COUNT_STATIONARY = 0;

// ---------------------------------------
// TASKS
task move();
task lift();
task claw();
task clawLift();
// END TASKS


// ---------------------------------------
// FUNCTIONS
// LIFT
void moveLift(int power);
void moveLiftUp(int power);
void moveLiftDown(int power);
void holdLift();

void moveLiftUpToConeHeightAndHold(int power);
void moveLiftUpToConeHeightAndStop(int power);
void moveLiftUpToConeHeightAndHoldAuton(int power);
void moveLiftDownToConeHeightAndStop(int power);
bool moveLiftUpAndStop(int distance, int power);
bool moveLiftUpAndHold(int distance, int power);
void moveLiftUpAndStopAuton(int distance, int power);
bool moveLiftDownAndStop(int distance, int power);
bool moveLiftDownAndHold_Touch(int power);
bool moveLiftDownAndStop_Touch(int power);
bool moveLiftUpAndHold_Smart(int distance, int power);

// CLAW LIFT
void moveClawLift(int power);
void moveClawLiftUp(int power);
void moveClawLiftDown(int power);
void moveClawLiftUpAndStop(int distance, int power);
void moveClawLiftUpAndStop_Touch(int power);
void moveClawLiftDownAndStop(int distance, int power);
void moveClawLiftDownAndStop_Touch(int power);

// CLAW
void moveClaw(int power);
void openClaw(int power);
void closeClaw(int power);

// MOBILE LIFT
void moveMobileLift(int power);
void moveMobileLiftUp(int power);
void moveMobileLiftDown(int power);
void moveMobileLiftUpAndStop();
void moveMobileLiftUpAndStopAuton();
void moveMobileLiftDownAndStop();
void moveMobileLiftDownAndStopAuton(int distance);
void moveMobileLiftDownToPickUpAuton();
void stopMobileLift();

// MOVE
void MoveAccel(int distance, int power);
void MoveAccelAuton(int distance, int power);
void MoveAccelMobile(int distance, int power);
void MoveHelper(int power);
void TurnGyro(int distance, int power);
void TurnHelper(int power);

// MACRO
void moveMobileLiftUpToStack(int powerLift, int distanceClawLift, int powerClawLift);
void moveMobileLiftUpToStackAuton(int powerLift, int distanceClawLift, int powerClawLift);
void moveMobileLiftDownToRelease(int powerLift, int distanceClawLift, int powerClawLift);
void moveMobileLiftDownToPickUp();
void moveMobileLiftDownToReleaseAuton(int powerLift, int distanceClawLift, int powerClawLift);
void moveLiftUpForStationaryGoal(int liftValue);
void moveLiftUpForStationaryGoalAuton(int liftValue);
void moveLiftUpToConeHeightAndRelease(int powerLift, int distanceClawLift, int powerClawLift);
void moveLiftDownAndPickUp(int distanceLift,int powerliftUp, int powerliftDown, int distanceClawLift, int powerClawLift);

void moveLiftDownAndPkcUpForFeed(int distanceLift, int powerliftUp, int powerliftDown, int distanceClawLift, int powerClawLift);
void moveLiftToMax(int distanceLift, int powerLift, int distanceClawLift, int powerClawLift);



void LiftDownPickUpClawLiftUpLiftDown_PART1(int liftValue, bool manualFeed);
void LiftDownPickUpClawLiftUpLiftDown_PART2(int liftValue, bool manualFeed);
void LiftDownPickUpClawLiftUpLiftDown_FEED();

// BATTERY
int AdjustPowerUsingBatteryLevel(int originalPower);
int AdjustPowerUsingExternalBatteryLevel(int originalPower);

// LCD
void AutonomousSelector(int btnLCD);
void DisplayAutonomousMode(int autonomousModeValue);
void displayBatteryLevelOnLCD(int autonomousModeValue);

// SENSORS
int getLiftPosition();
int getLiftTargetPosition();
int getClawLiftPosition();
int getClawLiftDown();
int getStaionaryGoal();
int getLiftTargetPositionForStationaryGoal();
// void moveLiftUpAndRelease(int distanceLift, int powerLift, int distanceClawLift, int powerClawLift);

// HELPERS
void dropCone();
void startAuton();
void autonRed();
void autonRed2();
void stopAll();
void stopLift();
void stopClawLift();
void stopClaw();

// END FUNCTIONS

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	if (autonomousMode == 1)
	{
		autonRed();
	}
	else if (autonomousMode == 2)
	{
		autonRed2();
	}

	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task move()
{
	while (true)
	{
		wait1Msec(50);

		int ch1 = vexRT[Ch1];
		int ch3 = vexRT[Ch3];

		motor[wheelLeft] = -ch3 + ch1;
		motor[wheelRight] = -(-ch3 - ch1);

		if (abs(motor[wheelRight]) < 17 || abs(motor[wheelLeft]) < 17)
		{
			motor[wheelLeft] = 0;
			motor[wheelRight] = 0;
		}
	}
}


task lift()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8R] == 1) {
			if (vexRT[Btn7U] == 1) { //Move Lift up with btn 7U
				moveLiftUp(FULLPOWER); //80
			}

			else if (vexRT[Btn7D] == 1){ //Move Lift down with btn 7D

				// moveLiftDownAndHold_Touch(powerliftDown); //-40
				moveLiftDown(powerliftDown); //-40

			}
			else if (vexRT[Btn7R] == 1){
				moveMobileLiftDownAndStop();
			}
			else if (vexRT[Btn7L] == 1){
				moveMobileLiftUpAndStop();
			}
			else if (vexRT[Btn6U] == 1){
				moveLiftUpForStationaryGoal(STATIONARY_LIFT);
			}

			// if (vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0){
			// 	stopClawLift();
			// }

			if (LIFT_STATUS != "holdLift" && vexRT[Btn7U] == 0 && vexRT[Btn7D] == 0){
				stopLift();
			}

			if (vexRT[Btn7R] == 0 && vexRT[Btn7L] == 0){
				stopMobileLift();
			}
		}
		else if (vexRT[Btn8R] == 0) {
			if (vexRT[Btn7U] == 1) {


				CONE_COUNT++;


				//int liftUp = getClawLiftUp();
				int liftDown = getClawLiftDown();

				if (liftDown != 1){
					LiftDownPickUpClawLiftUpLiftDown_PART1(MIN_LIFT, false);
				}
				else if (liftDown == 1)
				{
					LiftDownPickUpClawLiftUpLiftDown_PART2(MIN_LIFT, false);
				}

				// int cur = getLiftPosition();
				// moveLiftDownAndStop(MIN_LIFT, powerliftDown);
				// wait1Msec(500);
				// moveLiftUpAndStop(cur, FULLPOWER);


				// moveLiftUpToConeHeightAndRelease(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
			}
			else if (vexRT[Btn7D] == 1) {


				//int liftUp = getClawLiftUp();
				int liftDown = getClawLiftDown();

				if (liftDown != 1){
					LiftDownPickUpClawLiftUpLiftDown_PART1(MIN_LIFT, false);
				}
				else if (liftDown == 1)
				{
					LiftDownPickUpClawLiftUpLiftDown_PART2(MIN_LIFT, false);
				}


				// LIFT_STATUS = "moveLiftUpAndStop";
				// moveLiftUpAndStop(cur + offset, FULLPOWER);

				// LIFT_STATUS = "moveClawLiftUp";

				// moveLiftDownAndPickUp(MIN_LIFT, powerliftUp, powerliftDown, MIN_CLAWLIFT, powerClawLiftDown);
				// moveLiftDownAndStop(230, powerliftDown);
			}

			// else if (vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0){
			// 	stopClawLift();
			// }
			else if (vexRT[Btn7L] == 1){
				//moveMobileLiftUpToStack(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
				// moveMobileLiftUp(FULLPOWER);
				moveMobileLiftUpAndStop();

			}
			else if (vexRT[Btn7R] == 1){
				// moveMobileLiftDownToRelease(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
				moveMobileLiftDownToPickUp();
				// moveMobileLiftDownAndStop();
				// moveMobileLiftDownAndStop(750, 80);
				// moveMobileLiftDown(30);
			}
			else if (vexRT[Btn8U] == 1){
				CONE_COUNT++;
				LiftDownPickUpClawLiftUpLiftDown_PART1(FEED_LIFT, true);
				LiftDownPickUpClawLiftUpLiftDown_PART2(FEED_LIFT, true);

				// LiftDownPickUpClawLiftUpLiftDown_FEED();

			}
			else if (vexRT[Btn8D] == 1){
				LiftDownPickUpClawLiftUpLiftDown_PART1(FEED_LIFT, true);
				LiftDownPickUpClawLiftUpLiftDown_PART2(FEED_LIFT, true);
			}

			if (vexRT[Btn7R] == 0 && vexRT[Btn7L] == 0){
				stopMobileLift();
			}

			if (LIFT_STATUS == "openClawAndmoveClawLiftDown"){
				int cur = getLiftPosition();
				int offset = getLiftTargetPosition();

				if (CONE_COUNT > 0){
					moveLiftDownAndStop(cur + offset - 20, powerliftDown);
				}

				LIFT_STATUS = "";
			}
		}

	}
}

void LiftDownPickUpClawLiftUpLiftDown_PART1(int liftValue, bool manualFeed)
{
	// READY PICKUP
	openClaw(FULLPOWER);
	wait1Msec(300);

	stopClaw();

	int offset = getLiftTargetPosition();
	int target = liftValue + offset;

	int clawLiftDown = getClawLiftDown();
	// writeDebugStreamLine("clawLiftDown: %d", clawLiftDown);
	if (clawLiftDown != 1)
	{
		moveLiftUpAndHold(target, FULLPOWER);
	}

	// CLAW LIFT DOWN
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);

	if (!manualFeed)
	{
		// moveLiftDownAndStop_Touch(powerliftDown);
		bool ret = moveLiftDownAndStop(MIN_LIFT, powerliftDown);
		if (ret) {
			int tcur = getLiftPosition();
			moveLiftUpAndStop(tcur + 20, 30);
		}
	}
}


void LiftDownPickUpClawLiftUpLiftDown_PART2(int liftValue, bool manualFeed)
{
	int offset = getLiftTargetPosition();
	int target = liftValue + offset;
	bool ret = true;

	// PICKUP
	closeClaw(FULLPOWER);

	if (manualFeed){
		ret = moveLiftDownAndStop(FEED_LIFT, powerliftDown);
		if (!ret){
			return;
		}
	}
	else {
		ret = moveLiftDownAndHold_Touch(powerliftDown);
		if (!ret){
			return;
		}
	}

	// PICK UP CONE AND HOLD
	wait1Msec(300);

	// CONE HOLD
	closeClaw(10);

	moveClawLiftUp(FULLPOWER);

	wait1Msec(100);

	// LIFT UP
	// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	int tcur = getLiftPosition();
	writeDebugStreamLine("LiftDownPickUpClawLiftUpLiftDown) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);


	// PUSH CONE DOWN
	if (CONE_COUNT < 2){
		moveLiftDownAndStop_Touch(powerliftDown);
		openClaw(POWER_CLAW_OPEN);
		wait1Msec(100);
		stopClaw();
	}
	else
	{
		int tcur = getLiftPosition();
		ret = moveLiftDownAndStop(tcur - 50, powerliftDown);

		if (!ret){
			return;
		}

		stopClaw();
	}
}


void moveLiftUpForStationaryGoal(int liftValue)
{
	int offset = getLiftTargetPositionForStationaryGoal();
	int target = liftValue + offset;
	bool ret = true;

	// PICKUP
	closeClaw(FULLPOWER);

	ret = moveLiftDownAndHold_Touch(powerliftDown);
	if (!ret){
		return;
	}


	// PICK UP CONE AND HOLD
	wait1Msec(300);

	// CONE HOLD
	closeClaw(10);

	moveClawLiftUp(FULLPOWER);

	wait1Msec(100);

	// LIFT UP
	// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	int tcur = getLiftPosition();
	writeDebugStreamLine("MoveLiftUpForStationaryGoal) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	while (getStaionaryGoal() == 0){

		if (vexRT[Btn8L] == 1)
		{
			return;
		}
	}

	tcur = getLiftPosition();
	ret = moveLiftDownAndStop(tcur - 50, powerliftDown);

	if (!ret){
		return;
	}

	wait1Msec(100);

	openClaw(FULLPOWER);
	wait1Msec(300);

	stopClaw();

	ret = moveLiftUpAndStop(target, FULLPOWER);
	if (!ret){
		return;
	}

	CONE_COUNT_STATIONARY++;
}

void moveLiftUpForStationaryGoalAuton(int liftValue)
{
	int offset = getLiftTargetPositionForStationaryGoal();
	int target = liftValue + offset;
	bool ret = true;

	// PICKUP
	//closeClaw(FULLPOWER);

	/*ret = moveLiftDownAndHold_Touch(powerliftDown);
	if (!ret){
	return;
	}


	// PICK UP CONE AND HOLD
	wait1Msec(300);*/

	// CONE HOLD
	closeClaw(10);

	moveClawLiftUp(FULLPOWER);

	wait1Msec(100);

	// LIFT UP
	// ret = moveLiftUpAndHold_Smart(target, FULLPOWER);
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	int tcur = getLiftPosition();
	writeDebugStreamLine("MoveLiftUpForStationaryGoal) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	while (getStaionaryGoal() == 0){

		if (vexRT[Btn8L] == 1)
		{
			return;
		}
	}
	MoveHelper(0);
	wait1Msec(500);
	tcur = getLiftPosition();
	ret = moveLiftDownAndStop(tcur - 50, powerliftDown);

	if (!ret){
		return;
	}

	wait1Msec(100);

	openClaw(FULLPOWER);
	wait1Msec(300);

	stopClaw();

	ret = moveLiftUpAndStop(target, FULLPOWER);
	if (!ret){
		return;
	}

	CONE_COUNT_STATIONARY++;
}

void LiftDownPickUpClawLiftUpLiftDown_FEED()
{
	// READY PICKUP
	openClaw(FULLPOWER);
	wait1Msec(200);

	stopClaw();

	int offset = getLiftTargetPosition();
	int target = MIN_LIFT + offset;

	int clawLiftDown = getClawLiftDown();
	// writeDebugStreamLine("clawLiftDown: %d", clawLiftDown);
	if (clawLiftDown != 1)
	{
		moveLiftUpAndHold(target, FULLPOWER);
	}

	// CLAW LIFT DOWN
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);

	// PICKUP
	closeClaw(FULLPOWER);
	bool ret = moveLiftDownAndHold_Touch(powerliftDown);
	if (!ret){
		return;
	}

	// PICK UP CONE AND HOLD
	wait1Msec(500);

	// CONE HOLD
	closeClaw(10);

	// LIFT UP
	ret = moveLiftUpAndHold(target, FULLPOWER);
	if (!ret){
		return;
	}

	// int tcur = getLiftPosition();
	// writeDebugStreamLine("LiftDownPickUpClawLiftUpLiftDown) CONE_COUNT: %d, target: %d, lift: %d", CONE_COUNT, target,  tcur);


	// CLAW LIFT UP
	moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);

	// PUSH CONE DOWN
	if (CONE_COUNT < 2){
		moveLiftDownAndStop_Touch(powerliftDown);
		openClaw(POWER_CLAW_OPEN);
		wait1Msec(100);
		stopClaw();
	}
	else
	{
		int tcur = getLiftPosition();
		ret = moveLiftDownAndStop(tcur - 50, powerliftDown);

		if (!ret){
			return;
		}

		stopClaw();
	}
}

task clawLift()
{
	while (true)
	{
		wait1Msec(50);


		if (vexRT[Btn8R] == 1) {


			if (vexRT[Btn5U] == 1){
				moveClawLiftUpAndStop(MAX_CLAWLIFT, FULLPOWER);
			}
			else if (vexRT[Btn5D] == 1){
				// moveClawLiftDownAndStop_Touch(powerClawLiftDown);
				moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLiftDown);
			}
		}
		else if (vexRT[Btn8R] == 0) {
			if (vexRT[Btn5U] == 1){
				moveClawLiftUp(powerClawLiftUp);
			}
			else if (vexRT[Btn5D] == 1){
				moveClawLiftDown(powerClawLiftDown);
			}
		}


		if (vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0){
			stopClawLift();
		}


		// if (LIFT_STATUS != "" && vexRT[Btn5U] == 0 && vexRT[Btn5D] == 0 && vexRT[Btn6U] == 0){
		// 	stopClawLift();
		// }


		if (LIFT_STATUS == "moveClawLiftUp"){

			clearTimer(T3);

			while(true)
			{
				moveClawLiftUp(FULLPOWER);


				if (time1[T3] >= 500)
				{
					LIFT_STATUS = "openClawAndmoveClawLiftDown";
					// break;
				}

				if (time1[T3] >= 700)
				{
					LIFT_STATUS = "openClaw";
					break;
				}


				if (vexRT[Btn8L] == 1)
				{

					break;
				}


			}
		}
		// else
		// {
		// 	stopClawLift();
		// }
	}
}

task claw()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn6U] == 1){
			// moveClawLiftDown(25);
			closeClaw(60);
		}
		else if (vexRT[Btn6D] == 1){
			openClaw(POWER_CLAW_OPEN);
			wait1Msec(250);
			stopClaw();
		}

		if (LIFT_STATUS == "moveLiftDownAndStop"){
			closeClaw(FULLPOWER);
		}
		else if (LIFT_STATUS == "moveLiftUpAndStop"){
			closeClaw(10);
		}
		else if (LIFT_STATUS == "openClaw"){
			clearTimer(T3);

			while(true)
			{
				openClaw(FULLPOWER);

				if (time1[T3] >= 700)
				{
					LIFT_STATUS = "openClaw";
					break;
				}


				if (vexRT[Btn8L] == 1)
				{

					break;
				}


			}

		}
	}
}


task usercontrol()
{
	startTask(move);
	startTask(lift);
	startTask(claw);
	startTask(clawLift);
	// User control code here, inside the loop
	//int on = 0;
	while (true)
	{
		wait1Msec(50);


		int btnLCD = nLCDButtons;
		if (btnLCD > 0)
		{
			AutonomousSelector(btnLCD);
			// startTask(displayBatteryLevelOnLCD);
		}

		/*if(vexRT[Btn7L] == 1){ //toggle auto stay
		if (on == 0){
		on = 1;
		}
		else if (on != 0){
		on = 0;
		}
		}
		if (on == 0){
		moveLift(30);
		}
		else if (on != 0){
		moveLift(0);
		}*/
		while(vexRT[Btn8L] == 1){
			stopAll();
		}
		while (vexRT[Btn8R] == 1) {
			dropCone();
		}


	}
}

// -------------------------------------
// SENSORS
int getConeDistance()
{
	return SensorValue(coneHeight);
}

int getLiftPosition()
{
	return SensorValue(liftPosition);
}

int getLiftDown()
{
	return SensorValue(liftDown);
}


int getClawLiftDown()
{
	return SensorValue(clawLiftDown);
}

int getClawLiftUp()
{
	return SensorValue(clawLiftUp);
}

int getClawLiftPosition()
{
	return SensorValue(clawLiftPosition);
}

int getMobileLiftPosition()
{
	return SensorValue(mobileLiftPosition);
}

int getMobileLiftDown()
{
	return SensorValue(mobileLiftDown);
}

int getStaionaryGoal()
{
	return SensorValue(stationaryGoal);
}



// END SENSORS


// -------------------------------------
// STOPS
void stopAll(){

	LIFT_STATUS = "";

	motor[armLiftLeftB] = 0;
	motor[armLiftLeftT] = 0;
	motor[armLiftRightB] = 0;
	motor[armLiftRightT] = 0;
	motor[clawMotor] = 0;
	motor[clawLiftL] = 0;
	motor[clawLiftR] = 0;
	motor[mobileLift] = 0;
	motor[wheelLeft] = 0;
	motor[wheelRight] = 0;
}
// END STOPS

// -------------------------------------
// LIFT
int getLiftTargetPositionForStationaryGoal(){

	// int offset = 0;
	int offset = 120;
	if (CONE_COUNT_STATIONARY > 7){
		offset = 140;
	}
	return CONE_COUNT_STATIONARY * offset;



	// switch (CONE_COUNT)
	// {
	// 	case 0: offset = 0; break;
	// 	case 1: offset = 100; break;
	// 	case 2: offset = 200; break;
	// 	case 3: offset = 300; break;
	// 	case 4: offset = 400; break;
	// 	case 5: offset = 550; break;
	// 	case 6: offset = 600; break;
	// 	case 7: offset = 700; break;
	// }

	// return offset;
}

int getLiftTargetPosition(){

	// int offset = 0;
	int offset = 120;
	if (CONE_COUNT > 7){
		offset = 140;
	}
	return CONE_COUNT * offset;



	// switch (CONE_COUNT)
	// {
	// 	case 0: offset = 0; break;
	// 	case 1: offset = 100; break;
	// 	case 2: offset = 200; break;
	// 	case 3: offset = 300; break;
	// 	case 4: offset = 400; break;
	// 	case 5: offset = 550; break;
	// 	case 6: offset = 600; break;
	// 	case 7: offset = 700; break;
	// }

	// return offset;
}


void holdLift(){
	LIFT_STATUS = "holdLift";

	moveLift(10);
}

void holdDownLift(){
	LIFT_STATUS = "holdLift";

	// writeDebugStreamLine("holdDownLift");
	moveLift(-10);
}

void stopLift(){
	LIFT_STATUS = "stopLift";

	moveLift(0);
}

void moveLiftUp(int power) {

	LIFT_STATUS = "moveLiftUp";

	if (getLiftPosition() >= MAX_LIFT)
	{
		return;
	}
	moveLift(power);
}

void moveLiftDown(int power) {

	LIFT_STATUS = "moveLiftDown";

	// if (getLiftPosition() <= MIN_LIFT)
	if (getLiftDown() == 1)
	{
		return;
	}
	moveLift(-power);
}

void moveLift(int power){

	// LIFT_STATUS = "moveLift";

	int newPower = AdjustPowerUsingBatteryLevel(power);
	motor[armLiftLeftB] = -newPower;
	// motor[armLiftLeftT] = newPower; // Left Top
	motor[armLiftRightB] =  newPower;
	// motor[armLiftRightT] = -newPower; // Right Top
}

// HELPER
void moveLiftUpToConeHeightAndRelease(int powerLift, int distanceClawLift, int powerClawLift) {
	closeClaw(5);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLift);
	moveLiftUpToConeHeightAndHold(powerLift);
	wait1Msec(200);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLift);
	wait1Msec(200);
	wait1Msec(200);
	moveLiftDownToConeHeightAndStop(30);
	wait1Msec(200);
	// openClaw(50);
	// wait1Msec(225);
	// stopClaw();
}

void moveLiftUpToConeHeightAndHold(int power) {
	// writeDebugStreamLine("moveLiftUpToConeHeightAndHold) maxHeight: %d", maxHeight);

	moveLiftUp(power);
	wait1Msec(100);

	int distaince = getConeDistance();
	int height = getLiftPosition();
	// while (distaince > 0 && distaince < 20){
	int count = 0;
	int tPower = power;
	while (true){
		if (distaince > 20)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #1) Cone Distaince: %d, Lift Height: %d", distaince, height);
			count++;
			tPower = 0;

			wait1Msec(50);
		}
		else if (distaince < 21 && count > 0)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #2) Cone Distaince: %d, Lift Height: %d", distaince, height);

			count  = 0;
			tPower = power;
		}

		if (height >= MAX_LIFT)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #3) Cone Distaince: %d, Lift Height: %d", distaince, height);
			break;
		}

		if (count > 3)
		{
			break;
		}

		moveLiftUp(tPower);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		distaince = getConeDistance();
		height = getLiftPosition();
	}


	holdLift();

	// wait1Msec(100);
	// stopLift();
}

void moveLiftUpToConeHeightAndHoldAuton(int power) {
	// writeDebugStreamLine("moveLiftUpToConeHeightAndHold) maxHeight: %d", maxHeight);
	moveClawLiftUp(30);
	wait1Msec(300);
	moveClawLiftUp(0);
	moveLiftUp(power);
	wait1Msec(100);

	int distaince = getConeDistance();
	int height = getLiftPosition();
	// while (distaince > 0 && distaince < 20){
	int count = 0;
	int tPower = power;
	while (true){
		if (distaince > 20)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #1) Cone Distaince: %d, Lift Height: %d", distaince, height);
			count++;
			tPower = 0;

			wait1Msec(50);
		}
		else if (distaince < 21 && count > 0)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #2) Cone Distaince: %d, Lift Height: %d", distaince, height);

			count  = 0;
			tPower = power;
		}

		if (height >= MAX_LIFT)
		{
			writeDebugStreamLine("moveLiftUpToConeHeightAndHold #3) Cone Distaince: %d, Lift Height: %d", distaince, height);
			break;
		}

		if (count > 3)
		{
			break;
		}

		moveLiftUp(tPower);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		distaince = getConeDistance();
		height = getLiftPosition();
	}


	holdLift();

	// wait1Msec(100);
	// stopLift();
}

void moveLiftUpToConeHeightAndStop(int power) {

	moveLiftUp(power);
	wait1Msec(100);


	int distaince = getConeDistance();
	while (distaince > 0 && distaince < 25){
		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		distaince = getConeDistance();
	}

	// wait1Msec(100);
	stopLift();
}

void moveLiftDownToConeHeightAndStop(int power) {

	moveLiftDown(power);
	wait1Msec(100);

	int distaince = getConeDistance();
	// while (distaince > 20){
	while (true){

		if (0 < distaince && distaince < 20)
		{
			break;
		}

		moveLiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		distaince = getConeDistance();
	}

	writeDebugStreamLine("moveLiftDownToConeHeightAndStop) Cone Distaince: %d", distaince);

	// wait1Msec(100);
	stopLift();
}

bool moveLiftUpAndStop(int distance, int power) {

	float offset = 0;
	int current = getLiftPosition();

	while (current + offset < distance){

		wait1Msec(50);

		int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}

		current = getLiftPosition();

		offset = current - previous;
		offset = offset * 5;

	}
	stopLift();

	return true;
}


bool moveLiftUpAndHold_Smart(int distance, int power) {

	float offset = 0;
	int current = getLiftPosition();
	// int clawLiftUp = getClawLiftUp();
	float clawLiftStart = (distance * 1) / 6;

	// int offset = getLiftTargetPosition();
	// int target = liftValue + offset;

	while (current + offset < distance){
		// clearTimer(T2);
		// while (true){

		wait1Msec(50);

		int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1){
			return false;
		}


		// if ( time1[T2] >= 10000)) {
		// 	return false;
		// }

		// if (current >= MAX_LIFT) {
		// 	holdLift();
		// }

		current = getLiftPosition();

		if (current > clawLiftStart){
			writeDebugStreamLine("moveClawLiftUp");
			moveClawLiftUp(FULLPOWER);
		}

		// clawLiftUp = getClawLiftUp();
		// if (clawLiftUp == 0){
		// 	writeDebugStreamLine("stopClawLift");
		// 	stopClawLift();
		// }


		offset = current - previous;
		offset = offset * 5;


		// if (current + offset >= distance && clawLiftUp != 1)
		// {
		// 	writeDebugStreamLine("hold");
		// 	holdLift();
		// }
		// else if (current + offset < distance && clawLiftUp == 1)
		// {
		// 	writeDebugStreamLine("stopClawLift");
		// 	stopClawLift();
		// }
		// else if (current + offset >= distance && clawLiftUp == 1)
		// {
		// 	writeDebugStreamLine("break");
		// 	break;
		// }

	}
	holdLift();

	return true;
}


bool moveLiftUpAndHold(int distance, int power) {

	float offset = 0;
	int current = getLiftPosition();

	while (current + offset < distance){

		wait1Msec(50);

		int previous = current;


		moveLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}

		current = getLiftPosition();

		offset = current - previous;
		offset = offset * 5;

	}
	holdLift();

	return true;
}


void moveLiftUpAndStopAuton(int distance, int power) {

	moveClawLiftUp(80);
	while (getLiftPosition() < distance){
		moveLiftUp(power);
		if (getClawLiftPosition() > MAX_CLAWLIFT){
			stopClawLift();
		}
	}
	stopLift();
}

void moveLiftToMax(int distanceLift, int powerLift, int distanceClawLift, int powerClawLift) {
	moveLiftUpAndStop(distanceLift, powerLift);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLift);
}

void moveLiftDownAndPickUp(int distanceLift, int powerliftUp, int powerliftDown, int distanceClawLift, int powerClawLift) {
	openClaw(POWER_CLAW_OPEN);
	wait1Msec(500);//CHANGED FROM 200
	moveLiftUpToConeHeightAndHold((powerliftUp / 3) * 2/*powerliftUp*/);
	stopClaw();
	wait1Msec(200);
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLift);
	wait1Msec(200);
	moveLiftDownAndStop(distanceLift, powerliftDown);
	wait1Msec(200);
}

void moveLiftDownAndPkcUpForFeed(int distanceLift, int powerliftUp, int powerliftDown, int distanceClawLift, int powerClawLift) {
	openClaw(POWER_CLAW_OPEN);
	wait1Msec(500);//CHANGED FROM 200
	moveLiftUpToConeHeightAndHold(powerliftUp);
	stopClaw();
	wait1Msec(200);
	moveClawLiftDownAndStop(MIN_CLAWLIFT, powerClawLift);
	wait1Msec(200);
	moveLiftDownAndStop(distanceLift, powerliftDown + 10);
	wait1Msec(200);
	// moveLiftUpToConeHeightAndHold(powerLift);
	// wait1Msec(200);
	// moveClawLiftDownAndStop(distanceClawLift + 200, powerClawLift);
	// wait1Msec(200);
	// moveLiftDownAndStop(distanceLift, powerLift / 2);
	// wait1Msec(200);
	// moveLiftUpAndStop(distanceLift, powerLift);
	// wait1Msec(200);
	// moveClawLiftDownAndStop(distanceClawLift - 230, powerClawLift);
}



bool moveLiftDownAndHold_Touch(int power) {

	while (getLiftDown() == 0){
		// wait1Msec(50);

		moveLift(-power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}
	}

	holdDownLift();

	return true;
}

bool moveLiftDownAndStop_Touch(int power) {

	while (getLiftDown() == 0){
		// wait1Msec(50);

		moveLift(-power);
		if (vexRT[Btn8L] == 1)
		{
			return false;
		}
	}

	stopLift();

	return true;
}


bool moveLiftDownAndStop(int distance, int power) {

	// clearTimer(T2)
	int cur = getLiftPosition();
	int prev = -100;
	int count = 0;
	while (cur > distance){

		wait1Msec(50);

		moveLiftDown(power);

		if ( /*time1[T2] >= 5000) ||*/ vexRT[Btn8L] == 1 || vexRT[Btn7U] == 1 || vexRT[Btn7D] == 1) {
			return false;
		}

		if ((cur/10) == (prev/10)) {
			count++;

			if (count > 3)
			{
				writeDebugStreamLine("moveLiftDownAndStop) count: %d", count);

				return false;
			}
		}

		else {
			count = 0;
		}

		prev = cur;
		cur = getLiftPosition();
	}
	// wait1Msec(200);
	stopLift();

	return true;
}

bool moveLiftDownAndHold(int distance, int power) {

	// clearTimer(T2)
	int cur = getLiftPosition();
	int prev = -100;
	int count = 0;
	while (cur > distance){

		wait1Msec(50);

		moveLiftDown(power);

		if ( /*time1[T2] >= 5000) ||*/ vexRT[Btn8L] == 1) {
			break;
		}

		if ((cur/10) == (prev/10)) {
			count++;

			if (count > 3)
			{
				writeDebugStreamLine("moveLiftDownAndStop) count: %d", count);

				return false;
			}
		}

		else {
			count = 0;
		}

		prev = cur;
		cur = getLiftPosition();
	}
	// wait1Msec(200);
	holdLift();

	return true;
}
// END MOVES

// -------------------------------------
// CLAW LIFT
void stopClawLift(){
	moveClawLift(0);
}

void moveClawLiftUp(int power){
	moveClawLift(power);
}

void moveClawLiftDown(int power){
	moveClawLift(-power);
}

void moveClawLift(int power){
	// int newPower = AdjustPowerUsingExternalBatteryLevel(power);

	int newPower = power;

	motor[clawLiftL] = newPower;
	motor[clawLiftR] = -newPower;
}

void moveClawLiftUpAndStop_Touch(int power) {

	while (getClawLiftUp() == 0){
		moveClawLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	stopClawLift();
}

void moveClawLiftUpAndStop(int distance, int power) {

	while (getClawLiftPosition() < distance){
		moveClawLiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	stopClawLift();
}

void moveClawLiftDownAndStop_Touch(int power) {

	while (getClawLiftDown() == 0){
		// wait1Msec(50);

		moveClawLiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	stopClawLift();
}

void moveClawLiftDownAndStop(int distance, int power) {

	while (getClawLiftPosition() > distance){
		moveClawLiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	stopClawLift();
}
// END CLAW LIFT


// -------------------------------------
// CLAW
void stopClaw(){
	moveClaw(0);
}

void openClaw(int power){
	moveClaw(power);
}

void closeClaw(int power){
	moveClaw(-power);
}

void moveClaw(int power){
	motor[clawMotor] = power;
}

void dropCone() {
}
// END CLAW


// -------------------------------------
// MOBILE LIFT
void stopMobileLift(){
	moveMobileLift(0);
}

void moveMobileLiftUp(int power){
	moveMobileLift(power);
}

void moveMobileLiftDown(int power){
	moveMobileLift(-power);
}


void moveMobileLift(int power){
	motor[mobileLift] = power;
}

void moveMobileLiftUpToStack(int powerLift, int distanceClawLift, int powerClawLift) {
	moveLiftUpAndStop(450, powerLift);
	wait1Msec(200);
	moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLift);
	wait1Msec(200);
	moveMobileLiftUpAndStop();
}

void moveMobileLiftUpToStackAuton(int powerLift, int distanceClawLift, int powerClawLift) {
	moveLiftUpAndStop(450, powerLift);
	wait1Msec(200);
	moveMobileLiftUpAndStop();
}


void moveMobileLiftDownToReleaseAuton(int powerLift, int distanceClawLift, int powerClawLift) {
	moveLiftUpToConeHeightAndHoldAuton(powerLift / 2);
	wait1Msec(200);
	moveLiftUpAndStopAuton(LIFT_PICK_MOBILE + 100, powerLift); //original value was 1600
	wait1Msec(200);
	//moveClawLiftUpAndStop(distanceClawLift, powerClawLift);
	moveMobileLiftDownAndStop();
	MoveAccelAuton(800 + 100, 100);
}

void moveMobileLiftUpAndStop() {

	while (getMobileLiftPosition() < MAX_MOBILELIFT){
		moveMobileLiftUp(FULLPOWER);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}

	stopMobileLift();

	CONE_COUNT = 0;
}

void moveMobileLiftUpAndStopAuton() {

	while (getMobileLiftPosition() < MAX_MOBILELIFT){
		moveLiftDownAndStop(280, 50);

		while (getLiftPosition() > 280){
			moveLiftDown(50);
		}
		wait1Msec(200);
		stopLift();
		moveMobileLiftUp(120);
	}

	stopMobileLift();
}

void moveMobileLiftDownToPickUp2() {


	float offset = 0;
	int current = getLiftPosition();

	bool liftDone = false;
	bool clawLiftDone = false;

	while (!liftDone || !clawLiftDone){

		wait1Msec(50);

		int previous = current;


		moveLiftUp(80);
		moveClawLiftUp(80);

		if (vexRT[Btn8L] == 1)
		{
			return;
		}

		if (current + offset >= LIFT_PICK_MOBILE){
			stopLift();
			liftDone = true;
		}

		if (getClawLiftUp() == 1){
			stopClawLift();
			clawLiftDone = true;
		}

		current = getLiftPosition();

		offset = current - previous;
		offset = offset * 5;

	}

	// wait1Msec(200);
	moveMobileLiftDownAndStop();
}

void moveMobileLiftDownToPickUp() {
	if (CONE_COUNT < 4){
		openClaw(FULLPOWER);
	}

	bool ret = moveLiftUpAndStop(LIFT_PICK_MOBILE, FULLPOWER);
	if (!ret){
		return;
	}

	// wait1Msec(200);
	// moveClawLiftUpAndStop(FULLPOWER);
	wait1Msec(300);
	moveMobileLiftDownAndStop();
}

void moveMobileLiftDownToPickUpAuton() {
	if (CONE_COUNT < 4){
		closeClaw(10);
	}

	bool ret = moveLiftUpAndStop(LIFT_PICK_MOBILE, FULLPOWER);
	if (!ret){
		return;
	}

	// wait1Msec(200);
	// moveClawLiftUpAndStop(FULLPOWER);
	wait1Msec(300);
	moveMobileLiftDownAndStopAuton(0);
}

void moveMobileLiftDownToRelease(int powerLift, int distanceClawLift, int powerClawLift) {
	openClaw(POWER_CLAW_OPEN);
	wait1Msec(200);
	moveLiftUpToConeHeightAndHold(powerLift / 2);
	stopClaw();

	wait1Msec(200);
	moveLiftUpAndStop(LIFT_PICK_MOBILE, powerLift);
	wait1Msec(200);

	moveClawLiftUpAndStop(MAX_CLAWLIFT, powerClawLift);
	wait1Msec(200);
	moveMobileLiftDownAndStop();
}

void moveMobileLiftDownAndStop() {
	while (getMobileLiftDown() == 0){
		wait1Msec(50);
		moveMobileLiftDown(FULLPOWER);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		if (getMobileLiftPosition() < STOP_MOBILELIFT){
			openClaw(FULLPOWER);
		}

		int tcur = getLiftPosition();
		moveLiftUpAndStop(tcur + 50, 30);

	}

	stopClaw();
}

void moveMobileLiftDownAndStopAuton(int distance) {
	if (distance == 0) {
		while (getMobileLiftDown() == 0){
			wait1Msec(50);
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
		stopMobileLift();
	}
	else {
		while (getMobileLiftPosition() > distance){
			wait1Msec(50);
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
		stopMobileLift();
	}
}


void moveMobileLiftDownAndStop2() {
	if (CONE_COUNT < 1){
		while (getMobileLiftDown() == 0){
			wait1Msec(50);
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
	}
	else {
		while (getMobileLiftDown() == 0){
			wait1Msec(50);
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}

			if (getMobileLiftPosition() < STOP_MOBILELIFT){
				openClaw(FULLPOWER);
			}
		}
	}

	stopClaw();

}

void moveMobileLiftDownAndStop1() {

	if (CONE_COUNT < 9)
		// if (false)
	{
		writeDebugStreamLine("Fast");
		while (getMobileLiftPosition() > STOP_MOBILELIFT){
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}

		while (getMobileLiftDown() == 0){
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
	}
	else
	{
		writeDebugStreamLine("Slow");
		// moveClawLiftDown(FULLPOWER);
		while (getMobileLiftPosition() > REDUCE_MOBILELIFT){
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}

		while (getMobileLiftPosition() > STOP_MOBILELIFT){
			moveMobileLiftDown(FULLPOWER);
			if (vexRT[Btn8L] == 1)
			{
				break;
			}
		}
	}

	// stopClawLift();

	stopMobileLift();
}
// END MOBILE LIFT

// -------------------------------------
// MOVE
void MoveAccel(int distance, int power) {
	// ClearEncoder();

	//writeDebugStreamLine("MoveValue_Accel) Started ===");
	int velocity = 0;
	int position = 0;
	int value = 0;
	clearTimer(T3);
	int newPower = AdjustPowerUsingExternalBatteryLevel(power);
	while (abs(position) < abs(distance)){
		value = abs(SensorValue[Accel_x]);
		velocity += value;
		//velocity = (value == 0)? velocity : velocity + value;
		position += velocity;

		// writeDebugStreamLine("MoveValue_Accel) pos: %d, vel: %d ", position, velocity);
		if (time1[T3] >= 2000)
		{
			break;
		}
		MoveHelper(newPower);
		wait1Msec(100);
	}
	MoveHelper(0);
}

void MoveAccelMobile(int distance, int power) {
	// ClearEncoder();

	//writeDebugStreamLine("MoveValue_Accel) Started ===");
	int velocity = 0;
	int position = 0;
	int value = 0;
	clearTimer(T3);
	int newPower = AdjustPowerUsingExternalBatteryLevel(power);
	while (abs(position) < abs(distance)){
		moveMobileLiftDown(80);
		value = SensorValue[Accel_x];
		velocity += value;
		//velocity = (value == 0)? velocity : velocity + value;
		position += velocity;

		// writeDebugStreamLine("MoveValue_Accel) pos: %d, vel: %d ", position, velocity);
		if (time1[T3] >= 2000)
		{
			break;
		}
		MoveHelper(newPower);
		wait1Msec(100);
	}
	MoveHelper(0);
	moveMobileLiftDown(0);
}

void MoveAccelAuton(int distance, int power) {
	// ClearEncoder();

	//writeDebugStreamLine("MoveValue_Accel) Started ===");
	int velocity = 0;
	int position = 0;
	int value = 0;
	clearTimer(T3);
	int newPower = AdjustPowerUsingExternalBatteryLevel(power);
	while (abs(position) < abs(distance)){
		value = SensorValue[Accel_x];
		velocity += value;
		//velocity = (value == 0)? velocity : velocity + value;
		position += velocity;

		// writeDebugStreamLine("MoveValue_Accel) pos: %d, vel: %d ", position, velocity);
		if (time1[T3] >= 2000)
		{
			break;
		}
		MoveHelper(newPower);
		wait1Msec(100);
	}
	MoveHelper(0);
}

void MoveHelper(int power)
{
	motor[wheelLeft] = -power;
	motor[wheelRight] = power;
}

void TurnGyro(int distance, int power) {
	// wait1Msec(time);
	SensorValue[GyroPosition] = 0;
	int newPower = AdjustPowerUsingExternalBatteryLevel(power);
	while (abs(SensorValue[GyroPosition])<abs(distance)){
		TurnHelper(newPower);
	}
	TurnHelper(0);
}

void TurnHelper(int power)
{
	motor[wheelLeft] = power;
	motor[wheelRight] = power;
}

// void TurnRight(int power)
// {
// 	motor[wheelLeft] = -power;
// 	motor[wheelRight] = -power;
// }
// END MOVE

// -------------------------------------
// ADJUST BATTERY
int AdjustPowerUsingBatteryLevel(int originalPower)
{
	float batteryLevel = nImmediateBatteryLevel;
	float batteryOffset =	7500 / batteryLevel;
	int adjustedPower = originalPower * batteryOffset;
	//  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	return adjustedPower;
}

int AdjustPowerUsingExternalBatteryLevel(int originalPower)
{
	float batteryLevel = SensorValue[ExternalBatteryValue] * 3.57;

	float batteryOffset =	7500 / batteryLevel;
	int adjustedPower = originalPower * batteryOffset;
	//  writeDebugStreamLine("(AjustBattery) BatterLevel: %d - OriginalPower: %d - WantedPower: %d", AdjustBatteryLevel, OriginalPower, WantedPower);
	return adjustedPower;
}

// END ADJUST BATTERY


// -------------------------------------
// LCD
void AutonomousSelector(int btnLCD)
{
	writeDebugStreamLine("AutonomousSelector) button: %d", btnLCD);

	bLCDBacklight=true;

	displayBatteryLevelOnLCD(autonomousMode);
	int autonomousModeValue = autonomousMode;

	int button = 0;
	while(true)
	{
		button = nLCDButtons;

		if (button == 2 || vexRT[Btn8L] == 1)
		{
			displayBatteryLevelOnLCD(autonomousModeValue);

			bLCDBacklight=false;
			break;
		}
		else if (button == 1 || vexRT[Btn6U] == 1)
		{
			if (autonomousModeValue > 1)
			{
				autonomousModeValue--;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
		else if (button == 4 || vexRT[Btn6D] == 1)
		{
			if (autonomousModeValue < 4)
			{
				autonomousModeValue++;
			}

			DisplayAutonomousMode(autonomousModeValue);
		}
	}

	bLCDBacklight=false;
}

void DisplayAutonomousMode(int autonomousModeValue)
{
	writeDebugStreamLine("DisplayAutonomousMode) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string text;
	//}
	switch(autonomousModeValue)
	{
	case 1:
		{
			text = "Auton1";
			break;
		}
	case 2:
		{
			//text = "ProgrammingSkill";
			text = "Auton2";
			break;
		}
	case 3:
		{
			text = "None";
			break;
		}
	case 4:
		{
			text = "ProgSkill";
			break;
		}
	}

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(500);
}

void displayBatteryLevelOnLCD(int autonomousModeValue)
{
	writeDebugStreamLine("displayBatteryLevelOnLCD) autonomousModeValue: %d", autonomousModeValue);

	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	autonomousMode = autonomousModeValue;

	string text;
	sprintf(text, "Selected: %d", autonomousMode); //Build the value to be displayed

	//Display the Primary Robot battery voltage
	// displayLCDString(0, 0, "Autonomous: ");
	displayLCDString(0, 0, text);

	wait1Msec(800);

	//while(true)                                                        // An infinite loop to keep the program running until you terminate it
	//{
	clearLCDLine(0);                                            // Clear line 1 (0) of the LCD
	clearLCDLine(1);                                            // Clear line 2 (1) of the LCD

	string mainBattery, externalBattery;

	//Display the Primary Robot battery voltage
	displayLCDString(0, 0, "Primary: ");
	sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V'); //Build the value to be displayed
	displayNextLCDString(mainBattery);

	//float externalBatteryLevel = SensorValue[ExternalBatteryValue];
	//Display the Backup battery voltagef
	displayLCDString(1, 0, "External: ");
	sprintf(externalBattery, "%1.2f%c", (SensorValue[ExternalBatteryValue] * 3.57)/1000.0, 'V');    //Build the value to be displayed
	displayNextLCDString(externalBattery);

	//Short delay for the LCD refresh rate
	wait1Msec(500);
}

void startAuton() {
	closeClaw(60);
	wait1Msec(500);
	closeClaw(5);
}


void autonRed() {
	long startTime = nPgmTime;

	int powerLiftUp = 100;
	int powerClawLiftUp = 80;
	//moveLiftToMax(MAX_LIFT, powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);

	moveMobileLiftDownToPickUpAuton();
	//moveMobileLiftDownToReleaseAuton(powerLiftUp, MAX_CLAWLIFT, powerClawLiftUp);
	MoveAccelAuton(1000, 120);
	wait1Msec(GLOBAL_WAITER);
	MoveAccel(75, 50);
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftUpToStackAuton(powerLiftUp, MAX_CLAWLIFT, powerClawLiftUp);
	moveLiftDownAndStop(280, 50);
	wait1Msec(GLOBAL_WAITER);
	//moveLiftDownAndPickUp(MIN_LIFT, powerliftUp, powerliftDown, MIN_CLAWLIFT, powerClawLiftDown);
	openClaw(POWER_CLAW_OPEN); //for one cone only!
	wait1Msec(500); //for one cone only!
	stopClaw(); //for one cone only!
	/*MoveAccel(60, 60);
	wait1Msec(GLOBAL_WAITER);
	moveClawLiftDown(35);
	wait1Msec(GLOBAL_WAITER);
	moveClawLiftDown(0);
	closeClaw(50);
	wait1Msec(700);
	closeClaw(0);
	moveLiftUpToConeHeightAndRelease(powerliftUp, MAX_CLAWLIFT, powerClawLiftUp);
	wait1Msec(GLOBAL_WAITER);
	openClaw(50);
	wait1Msec(225);
	stopClaw();*/
	moveLiftUpAndStop(LIFT_PICK_MOBILE + 100, powerLiftUp);
	MoveAccel(1200, -70);
	wait1Msec(GLOBAL_WAITER + 200);
	TurnGyro(350, -50);
	wait1Msec(GLOBAL_WAITER + 200);
	MoveAccel(350 + 100, -100);
	wait1Msec(GLOBAL_WAITER + 200);
	TurnGyro(650 + 150, -70);
	wait1Msec(GLOBAL_WAITER + 200);
	MoveAccel(400, 100);
	wait1Msec(GLOBAL_WAITER);
	moveMobileLiftDownAndStopAuton(HIGHGOAL_MOBILELIFT);
	MoveHelper(50);
	wait1Msec(500);
	MoveHelper(0);
	wait1Msec(GLOBAL_WAITER);
	MoveAccel(300, -50);
	stopAll();
	writeDebugStreamLine("autonomous) Time: %d", nPgmTime - startTime);
}

void autonRed2() {
	closeClaw(10);
	wait1Msec(300);
	MoveHelper(30);
	moveLiftUpForStationaryGoalAuton(STATIONARY_LIFT);
	MoveAccel(300, -30);
	wait1Msec(GLOBAL_WAITER);
	TurnGyro(750, 70);
	wait1Msec(GLOBAL_WAITER + 200);
	MoveAccel(700, 50);
	stopAll();
}

// END LCD
