#pragma config(Sensor, in1,    LiftPosition,   sensorPotentiometer)
#pragma config(Sensor, in2,    LeftClawPosition, sensorPotentiometer)
#pragma config(Sensor, in3,    RightClawPosition, sensorPotentiometer)
#pragma config(Sensor, in8,    ExternalBatteryValue, sensorNone)
#pragma config(Sensor, dgtl2,  LiftTouch,      sensorTouch)
#pragma config(Motor,  port1,           ClawLeft,      tmotorVex393HighSpeed_HBridge, openLoop)
#pragma config(Motor,  port2,           WheelLeftOne,  tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port3,           WheelLeftTwo,  tmotorVex393TurboSpeed_MC29, openLoop)
#pragma config(Motor,  port4,           Lift_R1,       tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           Lift_R2,       tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           Lift_L1,       tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           Lift_L2,       tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           WheelRightOne, tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           WheelRightTwo, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          ClawRight,     tmotorVex393HighSpeed_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*        Description: Competition template for VEX EDR                      */
/*                                                                           */
/*---------------------------------------------------------------------------*/

// This code is for the VEX cortex platform
#pragma platform(VEX2)

// Select Download method as "competition"
#pragma competitionControl(Competition)

//Main competition background code...do not modify!
#include "Vex_Competition_Includes.c"

task StopAll();
task Move();
task Claw();
task ClawLeftTask();
task ClawRightTask();
task Lift();
task Hang();

void MoveHelper(int power);
void LiftHelper(int power);
void ClawHelper(int power);
void ClawHelperLeft(int power);
void ClawHelperRight(int power);

void OpenClawHelperLeft(int power);
void OpenClawHelperRight(int power);

void Throw(int distanceLift, int distanceToThrow, int power);
void LiftDownAndStop(int distance, int power);
void LiftDown(int power);
void LiftUp(int power);
void LiftUpAndStop(int distance, int power);
void LiftUpNoStop(int distance, int power);
void LiftStop();

void OpenClaw();
void CloseClaw();
void StopClaw();

const int MaxPower = 127;

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the cortex has been powered on and    */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks
	// running between Autonomous and Driver controlled modes. You will need to
	// manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// Set bDisplayCompetitionStatusOnLcd to false if you don't want the LCD
	// used by the competition include file, for example, you might want
	// to display your team name on the LCD in this function.
	// bDisplayCompetitionStatusOnLcd = false;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task autonomous()
{
	// ..........................................................................
	// Insert user code here.
	// ..........................................................................

	// Remove this function call once you have "real" code.
	AutonomousCodePlaceholderForTesting();
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

task StopAll()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8L] == 1)
		{
			// Stops everything
			int power = 0;
			LiftStop();
			StopClaw();
			//MoveHanging(power);
			//MoveClaw(power);
		}
	}
}


task Move ()
{
	while (true)
	{
		wait1Msec(50);

		motor[WheelRightOne] = (vexRT[Ch3] - vexRT[Ch1]);
		motor[WheelLeftOne] = (vexRT[Ch3] + vexRT[Ch1]);
		motor[WheelRightTwo] = (vexRT[Ch3] - vexRT[Ch1]);
		motor[WheelLeftTwo] = (vexRT[Ch3] + vexRT[Ch1]);


		if (abs(motor[WheelRightOne]) < 25)
		{
			MoveHelper(0);
		}
	}
}

void MoveHelper(int power)
{
	motor[WheelRightOne] = power;
	motor[WheelLeftOne] = power;
	motor[WheelRightTwo] = power;
	motor[WheelLeftTwo] = power;
}

task Hang()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8U] == 0) {

			if (vexRT[Btn5U] == 1) {
				LiftUp(30);
				wait1Msec(200);
				LiftUp(0);
			}
			else if (vexRT[Btn5D] == 1) {
				LiftDown(20);
				wait1Msec(50);
				LiftDown(0);

			}
		} else if (vexRT[Btn8U] == 1){

			if (vexRT[Btn5U] == 1) {
				LiftUpAndStop(2300, MaxPower);
			} else if (vexRT[Btn5D] == 1) {
				// LiftDown(MaxPower);

				ClawHelper(MaxPower);

				int pValue = 2800;
				waitUntil(abs(SensorValue[LeftClawPosition]) > pValue || abs(SensorValue[RightClawPosition]) > pValue);
				StopClaw();


				LiftDownAndStop(850,  MaxPower);
				// LiftDown(MaxPower);
				// waitUntil(abs(SensorValue[LiftPosition]) < 850);
				LiftDown(115);
				ClawHelper(MaxPower);

				// pValue = 4100;
				// waitUntil(abs(SensorValue[LeftClawPosition]) > pValue && abs(SensorValue[RightClawPosition]) > pValue);
				// LiftStop();
				// StopClaw();


			}
		}
	}
}

task ClawLeftTask()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8L] == 1)
		{
			ClawHelperLeft(0);
		}

		if (vexRT[Btn8U] == 0)
		{

			int positionOpen = 1200;

			if (abs(SensorValue[LeftClawPosition]) > 1300) {
				positionOpen = 1800;
			}
			// else if (abs(SensorValue[LeftClawPosition]) > 2400) {
			// 	positionOpen = 3000;
			// }

			if (vexRT[Btn6D] == 1)
			{
				// open
				while (abs(SensorValue[LeftClawPosition])<abs(positionOpen)){


					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperLeft(MaxPower);
				}

				ClawHelperLeft(10);
				// if (vexRT[Btn8L] == 1)
				// {
				// 	break;
				// }


				//MoveHanging(power);
				//MoveClaw(power);
			}
			else if (vexRT[Btn6U] == 1)
			{
				// close
				while (abs(SensorValue[LeftClawPosition])>abs(700)){


					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperLeft(-MaxPower);
				}

				ClawHelperLeft(-30);
				//MoveHanging(power);
				//MoveClaw(power);
			}
		} else if (vexRT[Btn8U] == 1) {

			int positionOpen = 4000;

			if (vexRT[Btn6D] == 1)
			{
				// open
				while (abs(SensorValue[LeftClawPosition])<abs(positionOpen)){


					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperLeft(MaxPower);
				}

				// ClawHelperLeft(10);
			}
		}
	}
}

task ClawRightTask()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn8L] == 1)
		{
			ClawHelperRight(0);
		}

		if (vexRT[Btn8U] == 0)
		{

			int positionOpen = 1200;


			if (abs(SensorValue[LeftClawPosition]) > 1300) {
				positionOpen = 1800;
			}
			// else if (abs(SensorValue[LeftClawPosition]) > 2400) {
			// 	positionOpen = 3000;
			// }


			if (vexRT[Btn6D] == 1)
			{
				// open
				while (abs(SensorValue[RightClawPosition])<abs(positionOpen)){

					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperRight(MaxPower);

				}

				ClawHelperRight(10);
				// if (vexRT[Btn8L] == 1)
				// {
				// 	break;
				// }


				//MoveHanging(power);
				//MoveClaw(power);
			}
			else if (vexRT[Btn6U] == 1)
			{
				// close
				while (abs(SensorValue[RightClawPosition])>abs(700)){


					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperRight(-MaxPower);
				}

				ClawHelperRight(-30);
				//MoveHanging(power);
				//MoveClaw(power);
			}
		} else if (vexRT[Btn8U] == 1) {

			int positionOpen = 4000;

			if (vexRT[Btn6D] == 1)
			{
				// open
				while (abs(SensorValue[RightClawPosition])<abs(positionOpen)){


					if (vexRT[Btn8L] == 1) {
						break;
					}

					ClawHelperRight(MaxPower);
				}

				// ClawHelperRight(10);
			}
		}


	}
}


// task Claw_Left()
// {
// 	while (true)
// 	{
// 		wait1Msec(50);

// 		if (vexRT[Btn6U] == 1)
// 		{

// 			OpenClawHelperLeft(MaxPower);
// 			OpenClawHelperRight(MaxPower);
// 		}
// 		else if (vexRT[Btn6D] == 1)
// 		{
// 			OpenClawHelperLeft(MaxPower);
// 			OpenClawHelperRight(MaxPower);
// 		}
// }


// task Claw_Right()
// {
// 	while (true)
// 	{
// 		wait1Msec(50);

// 		if (vexRT[Btn6U] == 1)
// 		{

// 			OpenClawHelperLeft(MaxPower);
// 			OpenClawHelperRight(MaxPower);
// 		}
// 		else if (vexRT[Btn6D] == 1)
// 		{
// 			OpenClawHelperLeft(MaxPower);
// 			OpenClawHelperRight(MaxPower);
// 		}
// }

task Claw()
{
	while (true)
	{
		wait1Msec(50);

		if (vexRT[Btn6U] == 1)
		{
			OpenClaw();
			if (vexRT[Btn8L] == 1)
			{
				break;
			}


			//MoveHanging(power);
			//MoveClaw(power);
		}
		else if (vexRT[Btn6D] == 1)
		{
			CloseClaw();
			//MoveHanging(power);
			//MoveClaw(power);
		}
	}
}


// void OpenClawHelperLeft(int power)
// {
// 	int distance = 1000;
// 		while (abs(SensorValue[LeftClawPosition])<abs(distance)){
// 		motor[ClawLeft] = power;
// 		if (vexRT[Btn8L] == 1)
// 		{
// 			break;
// 		}

// 	}
// }


// void OpenClawHelperRight(int power)
// {
// 	int distance = 1000;
// 		while (abs(SensorValue[RightClawPosition])<abs(distance)){
// 		motor[ClawRight] = power;
// 		if (vexRT[Btn8L] == 1)
// 		{
// 			break;
// 		}

// 	}
// }

void OpenClaw()
{
	ClawHelper(100);
}

void CloseClaw()
{
	ClawHelper(-MaxPower);
}

void StopClaw()
{
	ClawHelper(0);
}

void ClawHelperLeft(int power)
{
	// motor[ClawRight] = power;
	motor[ClawLeft] = power;
}

void ClawHelperRight(int power)
{
	// motor[ClawRight] = power;
	motor[ClawRight] = power;
}


void ClawHelper(int power)
{
	motor[ClawRight] = power;
	motor[ClawLeft] = power;
}

task Lift()
{
	while (true)
	{
		wait1Msec(50);


		int targetPosition = 1300;

		if (SensorValue(LiftPosition) > 1000) {
			targetPosition = 2000;
		}
		if (vexRT[Btn8R] == 1)
		{
			// Up slowly lift
			int powerLift = 65;
			while (SensorValue(LiftPosition) < targetPosition/*&&(vexRT[Btn7U]==0)*/){
				//if (vexRT[Btn7U]==1){
				//	MoveLift(100);
				//}
				LiftUp(powerLift);

				if (vexRT[Btn8L] == 1)
				{
					break;
				}
			}

			LiftUp(20);
		}


		if (vexRT[Btn8U] == 0)
		{
			if (vexRT[Btn7U] == 1)
			{
				Throw(3000 + 400, 2000 + 500, MaxPower);
				// LiftUpAndStop(2600, 120);
			}
			else if (vexRT[Btn7D] == 1)
			{
				// Down lift
				LiftDownAndStop(900,  40);
				// LiftDown(30);
				// wait1Msec(50);
				// LiftStop();
				LiftDown(20);
			}
		}
		else if (vexRT[Btn8U] == 1){
			if (vexRT[Btn7U] == 1)
			{
				LiftUp(MaxPower);
			}
			else if (vexRT[Btn7D] == 1)
			{
				LiftDown(MaxPower);
				wait1Msec(300);
				LiftDown(70);
			}
		}
	}
}

void Throw(int distanceLift, int distanceToThrow, int power){


	ClawHelper(-20);

	while (abs(SensorValue[LiftPosition])<abs(distanceLift)){
		LiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}

		if (abs(SensorValue[LiftPosition]) > distanceToThrow ){
			OpenClaw();
			// power = 0;
		}
	}


	LiftStop();

	StopClaw();

	LiftDownAndStop(900, 40);

	LiftDown(20);



	// ClawHelper(-20);
	// LiftUpNoStop(distanceLift, power); // throw
	// OpenClaw();
	// wait1Msec(300);
	// LiftStop();
	// // wait1Msec(100);
	// StopClaw();
}

void LiftUpNoStop(int distance, int power) {

	while (abs(SensorValue[LiftPosition])<abs(distance)){
		LiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	// MoveLift(0);
}

void LiftStop()
{
	LiftHelper(0);
}

void LiftUpAndStop(int distance, int power)
{
	while (abs(SensorValue[LiftPosition])<abs(distance)){
		LiftUp(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	LiftStop();
}

void LiftUp(int power)
{
	LiftHelper(power);
}

void LiftDownAndStop(int distance, int power) {

	while (abs(SensorValue[LiftPosition])>abs(distance)){

		writeDebugStreamLine("LiftDownAndStop) LiftPosition: %d", SensorValue[LiftPosition]);

		LiftDown(power);
		if (vexRT[Btn8L] == 1)
		{
			break;
		}
	}
	LiftStop();
}

void LiftDown(int power)
{
	LiftHelper(-power);
}

void LiftHelper(int power)
{
	motor[Lift_L1] = power;
	motor[Lift_L2] = power;
	motor[Lift_R1] = power;
	motor[Lift_R2] = power;
}


task usercontrol()
{
	// User control code here, inside the loop

	startTask(StopAll);
	startTask(ClawLeftTask);
	startTask(ClawRightTask);
	startTask(Lift);
	startTask(Move);
	startTask(Hang);
	while (true)
	{
		// This is the main execution loop for the user control program.
		// Each time through the loop your program should update motor + servo
		// values based on feedback from the joysticks.

		// ........................................................................
		// Insert user code here. This is where you use the joystick values to
		// update your motors, etc.
		// ........................................................................


	}
}
